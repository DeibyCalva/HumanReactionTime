
HumanReactionTime.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000156  00800200  00000eba  00000f4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  00800356  00800356  000010a4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001100  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00001140  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015d0  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ed2  00000000  00000000  00002808  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000951  00000000  00000000  000036da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000402c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065e  00000000  00000000  0000418c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000435  00000000  00000000  000047ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00004c1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	92 c0       	rjmp	.+292    	; 0x17a <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea eb       	ldi	r30, 0xBA	; 186
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 35       	cpi	r26, 0x56	; 86
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a6 e5       	ldi	r26, 0x56	; 86
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 3b       	cpi	r26, 0xBA	; 186
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	8c d1       	rcall	.+792    	; 0x438 <main>
 120:	ca c6       	rjmp	.+3476   	; 0xeb6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initialize>:
// putchar y getchar están en uart.c
FILE uart_str = FDEV_SETUP_STREAM(uart_putchar, uart_getchar, _FDEV_SETUP_RW);

void initialize(void){
	//configurar los puertos
	DDRD = 0x00;			// todos los puertos DDRD como entrada
 124:	1a b8       	out	0x0a, r1	; 10
	DDRC = 0xff;	 		// todos los puertos DDRC como salida
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	87 b9       	out	0x07, r24	; 7
	//OCR0A=16000000/(64*1000)-1=249
	//OCR0A: carga el valor hasta el cual se quiere que llegue el registro TCNT0 el el modo CTN
	OCR0A = 249;
 12a:	89 ef       	ldi	r24, 0xF9	; 249
 12c:	87 bd       	out	0x27, r24	; 39
	TIMSK0= (1<<OCIE0A);	//turn on timer 0 cmp match ISR
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
	//Envia al prescaler el valor de 64
	//pone a CS02=0    CS01=1    CS00=1  activa  los dos primeros bits del registro TCCR0B
	TCCR0B= 3;				//elige el presaclar a utilizar para obtener en cuanto tiempo se quiere que el registro TCNT0
 134:	93 e0       	ldi	r25, 0x03	; 3
 136:	95 bd       	out	0x25, r25	; 37
	//sea igual al registro OCR0A
	// enciende on clear-on-match
	TCCR0A= (1<<WGM01) ;
 138:	84 bd       	out	0x24, r24	; 36
	Tiempo_espe=0;
 13a:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <Tiempo_espe+0x1>
 13e:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <Tiempo_espe>
	PushState = NoPush;//Empujar el estado.
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <PushState>
	state = 0; //progama inicia en 0
 148:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <state+0x1>
 14c:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <state>
	
	
	uart_init();
 150:	84 d1       	rcall	.+776    	; 0x45a <uart_init>
	stdout = stdin = stderr = &uart_str; //envias un mensaje a la puerta serial
 152:	e4 eb       	ldi	r30, 0xB4	; 180
 154:	f3 e0       	ldi	r31, 0x03	; 3
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	92 e0       	ldi	r25, 0x02	; 2
 15a:	95 83       	std	Z+5, r25	; 0x05
 15c:	84 83       	std	Z+4, r24	; 0x04
 15e:	91 83       	std	Z+1, r25	; 0x01
 160:	80 83       	st	Z, r24
 162:	93 83       	std	Z+3, r25	; 0x03
 164:	82 83       	std	Z+2, r24	; 0x02
	fprintf(stdout,"Pulse el boton para encender el led \n\r  Atencion al Led o Sonido..! \n");
 166:	9c 01       	movw	r18, r24
 168:	45 e4       	ldi	r20, 0x45	; 69
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	82 e1       	ldi	r24, 0x12	; 18
 172:	92 e0       	ldi	r25, 0x02	; 2
 174:	2e d3       	rcall	.+1628   	; 0x7d2 <fwrite>
	//poner en marcha los ISR
	sei() ;
 176:	78 94       	sei
 178:	08 95       	ret

0000017a <__vector_21>:

}
//*Interrupt Service Routine
//llamado controlador de interrupciones
ISR (TIMER0_COMPA_vect) {
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	8f 93       	push	r24
	if (time1>0) 	--time1;
 186:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <time1>
 18a:	88 23       	and	r24, r24
 18c:	29 f0       	breq	.+10     	; 0x198 <__vector_21+0x1e>
 18e:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <time1>
 192:	81 50       	subi	r24, 0x01	; 1
 194:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <time1>
	if (time2>0)	--time2;  // decrementan los time si son mayores a cero
 198:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <time2>
 19c:	88 23       	and	r24, r24
 19e:	29 f0       	breq	.+10     	; 0x1aa <__vector_21+0x30>
 1a0:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <time2>
 1a4:	81 50       	subi	r24, 0x01	; 1
 1a6:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <time2>
	if (time3>0)	--time3;
 1aa:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <time3>
 1ae:	88 23       	and	r24, r24
 1b0:	29 f0       	breq	.+10     	; 0x1bc <__vector_21+0x42>
 1b2:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <time3>
 1b6:	81 50       	subi	r24, 0x01	; 1
 1b8:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <time3>
}
 1bc:	8f 91       	pop	r24
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <tarea1>:


void tarea1(void)
begin
 1c8:	ef 92       	push	r14
 1ca:	ff 92       	push	r15
 1cc:	0f 93       	push	r16
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
time1=1;						//reset the task timer
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <time1>
if (state==2){				//si  el estado es igual a 2 entoces
 1da:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <state>
 1de:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <state+0x1>
 1e2:	02 97       	sbiw	r24, 0x02	; 2
 1e4:	61 f5       	brne	.+88     	; 0x23e <tarea1+0x76>
	PORTC |= (1<<3);			//SE enciende el led en el puerto 3 Esto activa el Bit y deja el resto a 0
 1e6:	43 9a       	sbi	0x08, 3	; 8
	PORTC |= (1<<0);			//SE enciende el buzeer en el puerto 0
 1e8:	40 9a       	sbi	0x08, 0	; 8
	time++;					//el tiempo se incrementa
 1ea:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <time>
 1ee:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <time+0x1>
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <time+0x1>
 1f8:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <time>
	if(Tiempo_espe<3000){	//se entra al if anidado donde si el tiempo de espera es menor a 3000
 1fc:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <Tiempo_espe>
 200:	90 91 b2 03 	lds	r25, 0x03B2	; 0x8003b2 <Tiempo_espe+0x1>
 204:	88 3b       	cpi	r24, 0xB8	; 184
 206:	9b 40       	sbci	r25, 0x0B	; 11
 208:	d8 f4       	brcc	.+54     	; 0x240 <tarea1+0x78>
		fprintf(stdout,"Te adelantaste!! \n Pulsa de nuevo.. \n\r");  //se imprime un mensaje de error
 20a:	20 91 b6 03 	lds	r18, 0x03B6	; 0x8003b6 <__iob+0x2>
 20e:	30 91 b7 03 	lds	r19, 0x03B7	; 0x8003b7 <__iob+0x3>
 212:	46 e2       	ldi	r20, 0x26	; 38
 214:	50 e0       	ldi	r21, 0x00	; 0
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	88 e5       	ldi	r24, 0x58	; 88
 21c:	92 e0       	ldi	r25, 0x02	; 2
 21e:	d9 d2       	rcall	.+1458   	; 0x7d2 <fwrite>
		state=4;				// se pasa al estado 4 dode todo se pone a cero
 220:	84 e0       	ldi	r24, 0x04	; 4
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <state+0x1>
 228:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <state>
	}
}
else{						//en caso de que el estado no sea igual a 2
	PORTC=0x00;				//todos lo pines va a estar en 0
}
if (time>10000){				//si el tiempo  es mayor al tiempo aleatorio que se genero en el la tarea tskdelay
 22c:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <time>
 230:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <time+0x1>
 234:	81 31       	cpi	r24, 0x11	; 17
 236:	97 42       	sbci	r25, 0x27	; 39
 238:	08 f4       	brcc	.+2      	; 0x23c <tarea1+0x74>
 23a:	8a c0       	rjmp	.+276    	; 0x350 <tarea1+0x188>
 23c:	08 c0       	rjmp	.+16     	; 0x24e <tarea1+0x86>
		fprintf(stdout,"Te adelantaste!! \n Pulsa de nuevo.. \n\r");  //se imprime un mensaje de error
		state=4;				// se pasa al estado 4 dode todo se pone a cero
	}
}
else{						//en caso de que el estado no sea igual a 2
	PORTC=0x00;				//todos lo pines va a estar en 0
 23e:	18 b8       	out	0x08, r1	; 8
}
if (time>10000){				//si el tiempo  es mayor al tiempo aleatorio que se genero en el la tarea tskdelay
 240:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <time>
 244:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <time+0x1>
 248:	81 31       	cpi	r24, 0x11	; 17
 24a:	97 42       	sbci	r25, 0x27	; 39
 24c:	60 f0       	brcs	.+24     	; 0x266 <tarea1+0x9e>
	//genera un mesaje de que el tiempo  supero el limete para pulsar el boton
	fprintf(stdout,"Tiempo limite Excedido..! \n Pulsa de nuevo.. \n\r");
 24e:	20 91 b6 03 	lds	r18, 0x03B6	; 0x8003b6 <__iob+0x2>
 252:	30 91 b7 03 	lds	r19, 0x03B7	; 0x8003b7 <__iob+0x3>
 256:	4f e2       	ldi	r20, 0x2F	; 47
 258:	50 e0       	ldi	r21, 0x00	; 0
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	8f e7       	ldi	r24, 0x7F	; 127
 260:	92 e0       	ldi	r25, 0x02	; 2
 262:	b7 d2       	rcall	.+1390   	; 0x7d2 <fwrite>
 264:	75 c0       	rjmp	.+234    	; 0x350 <tarea1+0x188>
	state=4;					// y pasa al estdo 4  donde todo se pone a 0
}
if (state==3)					// si el estado es igual a 3
 266:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <state>
 26a:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <state+0x1>
 26e:	03 97       	sbiw	r24, 0x03	; 3
 270:	09 f0       	breq	.+2      	; 0x274 <tarea1+0xac>
 272:	68 c0       	rjmp	.+208    	; 0x344 <tarea1+0x17c>
{
	// escribe algunos datos en la bandera "written"
	int tiempoAnteriror = eeprom_read_word((uint16_t*)eeprom_data);
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	9b d5       	rcall	.+2870   	; 0xdb0 <eeprom_read_word>
 27a:	7c 01       	movw	r14, r24
	fprintf(stdout,"Su tiempo Anterior es en ms: ");	// imprime un mesaje del tiempo anterrior  el ususario en pulsar el boton cuando el led esta encendido
 27c:	c4 eb       	ldi	r28, 0xB4	; 180
 27e:	d3 e0       	ldi	r29, 0x03	; 3
 280:	2a 81       	ldd	r18, Y+2	; 0x02
 282:	3b 81       	ldd	r19, Y+3	; 0x03
 284:	4d e1       	ldi	r20, 0x1D	; 29
 286:	50 e0       	ldi	r21, 0x00	; 0
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	8f ea       	ldi	r24, 0xAF	; 175
 28e:	92 e0       	ldi	r25, 0x02	; 2
 290:	a0 d2       	rcall	.+1344   	; 0x7d2 <fwrite>
	fprintf(stdout,"%d \n\r", tiempoAnteriror) ;
 292:	ff 92       	push	r15
 294:	ef 92       	push	r14
 296:	0d ec       	ldi	r16, 0xCD	; 205
 298:	12 e0       	ldi	r17, 0x02	; 2
 29a:	1f 93       	push	r17
 29c:	0f 93       	push	r16
 29e:	8b 81       	ldd	r24, Y+3	; 0x03
 2a0:	8f 93       	push	r24
 2a2:	8a 81       	ldd	r24, Y+2	; 0x02
 2a4:	8f 93       	push	r24
 2a6:	86 d2       	rcall	.+1292   	; 0x7b4 <fprintf>
	
	
	eeprom_write_word((uint16_t*)eeprom_data,time);
 2a8:	60 91 ab 03 	lds	r22, 0x03AB	; 0x8003ab <time>
 2ac:	70 91 ac 03 	lds	r23, 0x03AC	; 0x8003ac <time+0x1>
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	82 d5       	rcall	.+2820   	; 0xdba <eeprom_write_word>
	fprintf(stdout,"Su tiempo actual es: ");	// imprime un mesaje del tiempo que tarda el ususario en pulsar el boton cuando el led esta encendido
 2b6:	2a 81       	ldd	r18, Y+2	; 0x02
 2b8:	3b 81       	ldd	r19, Y+3	; 0x03
 2ba:	45 e1       	ldi	r20, 0x15	; 21
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	83 ed       	ldi	r24, 0xD3	; 211
 2c4:	92 e0       	ldi	r25, 0x02	; 2
	fprintf(stdout,"%d \n\r", eeprom_read_word((uint16_t*)eeprom_data)) ;
 2c6:	85 d2       	rcall	.+1290   	; 0x7d2 <fwrite>
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	71 d5       	rcall	.+2786   	; 0xdb0 <eeprom_read_word>
 2ce:	9f 93       	push	r25
 2d0:	8f 93       	push	r24
 2d2:	1f 93       	push	r17
 2d4:	0f 93       	push	r16
 2d6:	8b 81       	ldd	r24, Y+3	; 0x03
 2d8:	8f 93       	push	r24
 2da:	8a 81       	ldd	r24, Y+2	; 0x02
 2dc:	8f 93       	push	r24
 2de:	6a d2       	rcall	.+1236   	; 0x7b4 <fprintf>
	
	
	if (time<tiempoAnteriror)
 2e0:	8d b7       	in	r24, 0x3d	; 61
 2e2:	9e b7       	in	r25, 0x3e	; 62
 2e4:	0c 96       	adiw	r24, 0x0c	; 12
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	f8 94       	cli
 2ea:	9e bf       	out	0x3e, r25	; 62
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	8d bf       	out	0x3d, r24	; 61
 2f0:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <time>
 2f4:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <time+0x1>
 2f8:	8e 15       	cp	r24, r14
 2fa:	9f 05       	cpc	r25, r15
 2fc:	60 f4       	brcc	.+24     	; 0x316 <tarea1+0x14e>
	{
		fprintf(stdout,"FUISTES MAS RAPIDO, EXCELENTE");
 2fe:	20 91 b6 03 	lds	r18, 0x03B6	; 0x8003b6 <__iob+0x2>
 302:	30 91 b7 03 	lds	r19, 0x03B7	; 0x8003b7 <__iob+0x3>
 306:	4d e1       	ldi	r20, 0x1D	; 29
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	89 ee       	ldi	r24, 0xE9	; 233
 310:	92 e0       	ldi	r25, 0x02	; 2
 312:	5f d2       	rcall	.+1214   	; 0x7d2 <fwrite>
 314:	0b c0       	rjmp	.+22     	; 0x32c <tarea1+0x164>
	} 
	else
	{
		fprintf(stdout,"FUISTES MAS LENTO, ¡LO SIENTO!");
 316:	20 91 b6 03 	lds	r18, 0x03B6	; 0x8003b6 <__iob+0x2>
 31a:	30 91 b7 03 	lds	r19, 0x03B7	; 0x8003b7 <__iob+0x3>
 31e:	4e e1       	ldi	r20, 0x1E	; 30
 320:	50 e0       	ldi	r21, 0x00	; 0
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	87 e0       	ldi	r24, 0x07	; 7
 328:	93 e0       	ldi	r25, 0x03	; 3
 32a:	53 d2       	rcall	.+1190   	; 0x7d2 <fwrite>
	}
	
	fprintf(stdout,"\n Pulse para intentarlo de nuevo.. ! \n ");/// imprime un mensaje para volver a intentar de nuevo medir el tiempo de reaccion
 32c:	20 91 b6 03 	lds	r18, 0x03B6	; 0x8003b6 <__iob+0x2>
 330:	30 91 b7 03 	lds	r19, 0x03B7	; 0x8003b7 <__iob+0x3>
 334:	47 e2       	ldi	r20, 0x27	; 39
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	86 e2       	ldi	r24, 0x26	; 38
 33e:	93 e0       	ldi	r25, 0x03	; 3
 340:	48 d2       	rcall	.+1168   	; 0x7d2 <fwrite>
 342:	06 c0       	rjmp	.+12     	; 0x350 <tarea1+0x188>
 344:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <state>
	
	state=4;				// despues de imprimir los mejase se va al estado 4 donde todo se pone  0
}
if (state==4){				//si el estado es igual a 4
 348:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <state+0x1>
 34c:	04 97       	sbiw	r24, 0x04	; 4
 34e:	61 f4       	brne	.+24     	; 0x368 <tarea1+0x1a0>
 350:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <state+0x1>
	state=0;					// el estado se resetea y se pone a 0
 354:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <state>
 358:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <Tiempo_espe+0x1>
	Tiempo_espe=0;				// el tiempo de espera se resetea y se pone a 0
 35c:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <Tiempo_espe>
 360:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <time+0x1>
	time=0;						// y el time se recetea y se pone a 0
 364:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <time>
 368:	df 91       	pop	r29
}
end
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	0f 91       	pop	r16
 370:	ff 90       	pop	r15
 372:	ef 90       	pop	r14
 374:	08 95       	ret

00000376 <tarea2>:
 376:	81 e0       	ldi	r24, 0x01	; 1

void tarea2(void){
	time2=1;     //reset the task timer
 378:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <time2>
	switch (PushState){//estado del boton
 37c:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <PushState>
 380:	82 30       	cpi	r24, 0x02	; 2
 382:	79 f0       	breq	.+30     	; 0x3a2 <tarea2+0x2c>
 384:	18 f4       	brcc	.+6      	; 0x38c <tarea2+0x16>
 386:	81 30       	cpi	r24, 0x01	; 1
 388:	31 f0       	breq	.+12     	; 0x396 <tarea2+0x20>
 38a:	08 95       	ret
 38c:	83 30       	cpi	r24, 0x03	; 3
 38e:	e1 f0       	breq	.+56     	; 0x3c8 <tarea2+0x52>
 390:	84 30       	cpi	r24, 0x04	; 4
 392:	01 f1       	breq	.+64     	; 0x3d4 <tarea2+0x5e>
 394:	08 95       	ret
		case NoPush:				//1
		if (~PIND & 0x02){
 396:	49 99       	sbic	0x09, 1	; 9
 398:	26 c0       	rjmp	.+76     	; 0x3e6 <tarea2+0x70>
			PushState=MaybePush;
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <PushState>
 3a0:	08 95       	ret
			}else{
			PushState=NoPush ;
		}
		break;
		case MaybePush:			//2
		if (~PIND & 0x02){		//en esta caso PIND vale 00000000 pero al negarlo vale  111111/00000 como esta afirmacion es falsa
 3a2:	49 99       	sbic	0x09, 1	; 9
 3a4:	0d c0       	rjmp	.+26     	; 0x3c0 <tarea2+0x4a>
			PushState=Pushed;	// pushState vale 3, es decir se va al etado 3
 3a6:	83 e0       	ldi	r24, 0x03	; 3
 3a8:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <PushState>
			state++;				// estado incrementa
 3ac:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <state>
 3b0:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <state+0x1>
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <state+0x1>
 3ba:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <state>
 3be:	08 95       	ret
		}
		else{
			PushState=NoPush;
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <PushState>
 3c6:	08 95       	ret
		}
		break;
		case Pushed:				//3
		if (~PIND & 0x02){
 3c8:	49 9b       	sbis	0x09, 1	; 9
 3ca:	0d c0       	rjmp	.+26     	; 0x3e6 <tarea2+0x70>
			PushState=Pushed;
			}else{
			PushState=MaybeNoPush;
 3cc:	84 e0       	ldi	r24, 0x04	; 4
 3ce:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <PushState>
 3d2:	08 95       	ret
		}
		break;
		case MaybeNoPush:			//4
		if (~PIND & 0x02){
 3d4:	49 99       	sbic	0x09, 1	; 9
 3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <tarea2+0x6a>
			PushState=Pushed;
 3d8:	83 e0       	ldi	r24, 0x03	; 3
 3da:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <PushState>
 3de:	08 95       	ret
			}else{
			PushState=NoPush;
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <PushState>
 3e6:	08 95       	ret

000003e8 <tskdelay>:
		break;
	}
}

void tskdelay(void){
	time3=1;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <time3>
	if (state==1){									// si el estado es igual a 1
 3ee:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <state>
 3f2:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <state+0x1>
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f4       	brne	.+60     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		nAleat=(9000-5000) + rand ()% 4000;       // se genera valores aleatorios  entre 4 y 8 seg y se entra al segundo if
 3fa:	ce d1       	rcall	.+924    	; 0x798 <rand>
 3fc:	60 ea       	ldi	r22, 0xA0	; 160
 3fe:	7f e0       	ldi	r23, 0x0F	; 15
 400:	5d d1       	rcall	.+698    	; 0x6bc <__divmodhi4>
 402:	80 56       	subi	r24, 0x60	; 96
 404:	90 4f       	sbci	r25, 0xF0	; 240
 406:	90 93 ae 03 	sts	0x03AE, r25	; 0x8003ae <nAleat+0x1>
 40a:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <nAleat>
		if (Tiempo_espe< nAleat){					// si el tiempo de espera es menor al valor generado aleatoriamente
 40e:	20 91 b1 03 	lds	r18, 0x03B1	; 0x8003b1 <Tiempo_espe>
 412:	30 91 b2 03 	lds	r19, 0x03B2	; 0x8003b2 <Tiempo_espe+0x1>
 416:	28 17       	cp	r18, r24
 418:	39 07       	cpc	r19, r25
 41a:	38 f4       	brcc	.+14     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			Tiempo_espe++;							// el tiempo de espara se incrementa
 41c:	2f 5f       	subi	r18, 0xFF	; 255
 41e:	3f 4f       	sbci	r19, 0xFF	; 255
 420:	30 93 b2 03 	sts	0x03B2, r19	; 0x8003b2 <Tiempo_espe+0x1>
 424:	20 93 b1 03 	sts	0x03B1, r18	; 0x8003b1 <Tiempo_espe>
 428:	08 95       	ret
			}else{										// si el tiempo de espera es igual o mayor al valor generado aleatoriamente
			state=2;								// se va al estado que vale 2 de la maquina de estado que esta en la tarea 2
 42a:	82 e0       	ldi	r24, 0x02	; 2
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <state+0x1>
 432:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <state>
 436:	08 95       	ret

00000438 <main>:
	}
}

//programa principal
int main(void){
	initialize();
 438:	75 de       	rcall	.-790    	; 0x124 <initialize>
	while(1){
		if (time1==0){		//si time1 llega a 0
 43a:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <time1>
 43e:	81 11       	cpse	r24, r1
			tarea1();		// se ejecuta la primera tarea
 440:	01 c0       	rjmp	.+2      	; 0x444 <main+0xc>
 442:	c2 de       	rcall	.-636    	; 0x1c8 <tarea1>
		}
		if (time2==0){		//si time2 llega a 0
 444:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <time2>
 448:	81 11       	cpse	r24, r1
			tarea2();		//se ejecuta la segunda tarea
 44a:	01 c0       	rjmp	.+2      	; 0x44e <main+0x16>
 44c:	94 df       	rcall	.-216    	; 0x376 <tarea2>
		}
		if(time3==0){		////si time3 llega a 0
 44e:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <time3>
 452:	81 11       	cpse	r24, r1
			tskdelay();		//se ejecuta la ultima tarea
 454:	f2 cf       	rjmp	.-28     	; 0x43a <main+0x2>
 456:	c8 df       	rcall	.-112    	; 0x3e8 <tskdelay>
 458:	f0 cf       	rjmp	.-32     	; 0x43a <main+0x2>

0000045a <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
 45a:	87 e6       	ldi	r24, 0x67	; 103
 45c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
 460:	88 e1       	ldi	r24, 0x18	; 24
 462:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 466:	08 95       	ret

00000468 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 468:	cf 93       	push	r28
 46a:	c8 2f       	mov	r28, r24

  if (c == '\a')
 46c:	87 30       	cpi	r24, 0x07	; 7
 46e:	61 f4       	brne	.+24     	; 0x488 <uart_putchar+0x20>
    {
      fputs("*ring*\n", stderr);
 470:	20 91 b8 03 	lds	r18, 0x03B8	; 0x8003b8 <__iob+0x4>
 474:	30 91 b9 03 	lds	r19, 0x03B9	; 0x8003b9 <__iob+0x5>
 478:	47 e0       	ldi	r20, 0x07	; 7
 47a:	50 e0       	ldi	r21, 0x00	; 0
 47c:	61 e0       	ldi	r22, 0x01	; 1
 47e:	70 e0       	ldi	r23, 0x00	; 0
 480:	8e e4       	ldi	r24, 0x4E	; 78
 482:	93 e0       	ldi	r25, 0x03	; 3
 484:	a6 d1       	rcall	.+844    	; 0x7d2 <fwrite>
      return 0;
 486:	0b c0       	rjmp	.+22     	; 0x49e <uart_putchar+0x36>
    }

  if (c == '\n')
 488:	8a 30       	cpi	r24, 0x0A	; 10
 48a:	11 f4       	brne	.+4      	; 0x490 <uart_putchar+0x28>
    uart_putchar('\r', stream);
 48c:	8d e0       	ldi	r24, 0x0D	; 13
 48e:	ec df       	rcall	.-40     	; 0x468 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 490:	e0 ec       	ldi	r30, 0xC0	; 192
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	85 ff       	sbrs	r24, 5
 498:	fd cf       	rjmp	.-6      	; 0x494 <uart_putchar+0x2c>
  UDR0 = c;
 49a:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

  return 0;
}
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 4a6:	6f 92       	push	r6
 4a8:	7f 92       	push	r7
 4aa:	8f 92       	push	r8
 4ac:	9f 92       	push	r9
 4ae:	af 92       	push	r10
 4b0:	bf 92       	push	r11
 4b2:	cf 92       	push	r12
 4b4:	df 92       	push	r13
 4b6:	ef 92       	push	r14
 4b8:	ff 92       	push	r15
 4ba:	0f 93       	push	r16
 4bc:	1f 93       	push	r17
 4be:	cf 93       	push	r28
 4c0:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 4c2:	20 91 a6 03 	lds	r18, 0x03A6	; 0x8003a6 <rxp.1827>
 4c6:	30 91 a7 03 	lds	r19, 0x03A7	; 0x8003a7 <rxp.1827+0x1>
 4ca:	23 2b       	or	r18, r19
 4cc:	09 f0       	breq	.+2      	; 0x4d0 <uart_getchar+0x2a>
 4ce:	cc c0       	rjmp	.+408    	; 0x668 <uart_getchar+0x1c2>
 4d0:	8c 01       	movw	r16, r24
 4d2:	0f 2e       	mov	r0, r31
 4d4:	f6 e5       	ldi	r31, 0x56	; 86
 4d6:	8f 2e       	mov	r8, r31
 4d8:	f3 e0       	ldi	r31, 0x03	; 3
 4da:	9f 2e       	mov	r9, r31
 4dc:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 4de:	c0 ec       	ldi	r28, 0xC0	; 192
 4e0:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
 4e2:	0f 2e       	mov	r0, r31
 4e4:	f6 ec       	ldi	r31, 0xC6	; 198
 4e6:	cf 2e       	mov	r12, r31
 4e8:	d1 2c       	mov	r13, r1
 4ea:	f0 2d       	mov	r31, r0
 4ec:	54 01       	movw	r10, r8
 4ee:	0f 2e       	mov	r0, r31
 4f0:	f5 e5       	ldi	r31, 0x55	; 85
 4f2:	6f 2e       	mov	r6, r31
 4f4:	f3 e0       	ldi	r31, 0x03	; 3
 4f6:	7f 2e       	mov	r7, r31
 4f8:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 4fa:	88 81       	ld	r24, Y
 4fc:	88 23       	and	r24, r24
 4fe:	ec f7       	brge	.-6      	; 0x4fa <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
 500:	88 81       	ld	r24, Y
 502:	84 fd       	sbrc	r24, 4
 504:	c4 c0       	rjmp	.+392    	; 0x68e <uart_getchar+0x1e8>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 506:	88 81       	ld	r24, Y
 508:	83 fd       	sbrc	r24, 3
 50a:	c4 c0       	rjmp	.+392    	; 0x694 <uart_getchar+0x1ee>
	  return _FDEV_ERR;
	c = UDR0;
 50c:	f6 01       	movw	r30, r12
 50e:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 510:	8d 30       	cpi	r24, 0x0D	; 13
 512:	11 f0       	breq	.+4      	; 0x518 <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
 514:	8a 30       	cpi	r24, 0x0A	; 10
 516:	61 f4       	brne	.+24     	; 0x530 <uart_getchar+0x8a>
	  {
	    *cp = c;
 518:	8a e0       	ldi	r24, 0x0A	; 10
 51a:	f4 01       	movw	r30, r8
 51c:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
 51e:	b8 01       	movw	r22, r16
 520:	a3 df       	rcall	.-186    	; 0x468 <uart_putchar>
	    rxp = b;
 522:	86 e5       	ldi	r24, 0x56	; 86
 524:	93 e0       	ldi	r25, 0x03	; 3
 526:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <rxp.1827+0x1>
 52a:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <rxp.1827>
	    break;
 52e:	9c c0       	rjmp	.+312    	; 0x668 <uart_getchar+0x1c2>
	  }
	else if (c == '\t')
 530:	89 30       	cpi	r24, 0x09	; 9
 532:	39 f0       	breq	.+14     	; 0x542 <uart_getchar+0x9c>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 534:	90 ee       	ldi	r25, 0xE0	; 224
 536:	98 0f       	add	r25, r24
 538:	9f 35       	cpi	r25, 0x5F	; 95
 53a:	20 f0       	brcs	.+8      	; 0x544 <uart_getchar+0x9e>
 53c:	80 3a       	cpi	r24, 0xA0	; 160
 53e:	a8 f0       	brcs	.+42     	; 0x56a <uart_getchar+0xc4>
 540:	01 c0       	rjmp	.+2      	; 0x544 <uart_getchar+0x9e>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
 542:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 544:	f5 ea       	ldi	r31, 0xA5	; 165
 546:	8f 16       	cp	r8, r31
 548:	f3 e0       	ldi	r31, 0x03	; 3
 54a:	9f 06       	cpc	r9, r31
 54c:	21 f4       	brne	.+8      	; 0x556 <uart_getchar+0xb0>
	      uart_putchar('\a', stream);
 54e:	b8 01       	movw	r22, r16
 550:	87 e0       	ldi	r24, 0x07	; 7
 552:	8a df       	rcall	.-236    	; 0x468 <uart_putchar>
 554:	d2 cf       	rjmp	.-92     	; 0x4fa <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
 556:	74 01       	movw	r14, r8
 558:	9f ef       	ldi	r25, 0xFF	; 255
 55a:	e9 1a       	sub	r14, r25
 55c:	f9 0a       	sbc	r15, r25
 55e:	f4 01       	movw	r30, r8
		uart_putchar(c, stream);
 560:	80 83       	st	Z, r24
 562:	b8 01       	movw	r22, r16
 564:	81 df       	rcall	.-254    	; 0x468 <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 566:	47 01       	movw	r8, r14
 568:	c8 cf       	rjmp	.-112    	; 0x4fa <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
 56a:	82 31       	cpi	r24, 0x12	; 18
 56c:	b9 f1       	breq	.+110    	; 0x5dc <uart_getchar+0x136>
 56e:	30 f4       	brcc	.+12     	; 0x57c <uart_getchar+0xd6>
 570:	83 30       	cpi	r24, 0x03	; 3
 572:	09 f4       	brne	.+2      	; 0x576 <uart_getchar+0xd0>
 574:	92 c0       	rjmp	.+292    	; 0x69a <uart_getchar+0x1f4>
 576:	88 30       	cpi	r24, 0x08	; 8
 578:	e9 f0       	breq	.+58     	; 0x5b4 <uart_getchar+0x10e>
 57a:	bf cf       	rjmp	.-130    	; 0x4fa <uart_getchar+0x54>
 57c:	87 31       	cpi	r24, 0x17	; 23
 57e:	29 f0       	breq	.+10     	; 0x58a <uart_getchar+0xe4>
 580:	8f 37       	cpi	r24, 0x7F	; 127
 582:	c1 f0       	breq	.+48     	; 0x5b4 <uart_getchar+0x10e>
 584:	85 31       	cpi	r24, 0x15	; 21
 586:	79 f0       	breq	.+30     	; 0x5a6 <uart_getchar+0x100>
 588:	b8 cf       	rjmp	.-144    	; 0x4fa <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 58a:	f6 e5       	ldi	r31, 0x56	; 86
 58c:	8f 16       	cp	r8, r31
 58e:	f3 e0       	ldi	r31, 0x03	; 3
 590:	9f 06       	cpc	r9, r31
 592:	09 f0       	breq	.+2      	; 0x596 <uart_getchar+0xf0>
 594:	08 f4       	brcc	.+2      	; 0x598 <uart_getchar+0xf2>
 596:	b1 cf       	rjmp	.-158    	; 0x4fa <uart_getchar+0x54>
 598:	f4 01       	movw	r30, r8
 59a:	31 97       	sbiw	r30, 0x01	; 1
 59c:	80 81       	ld	r24, Z
 59e:	80 32       	cpi	r24, 0x20	; 32
 5a0:	09 f0       	breq	.+2      	; 0x5a4 <uart_getchar+0xfe>
 5a2:	4a c0       	rjmp	.+148    	; 0x638 <uart_getchar+0x192>
 5a4:	aa cf       	rjmp	.-172    	; 0x4fa <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 5a6:	86 e5       	ldi	r24, 0x56	; 86
 5a8:	88 16       	cp	r8, r24
 5aa:	83 e0       	ldi	r24, 0x03	; 3
 5ac:	98 06       	cpc	r9, r24
 5ae:	09 f0       	breq	.+2      	; 0x5b2 <uart_getchar+0x10c>
 5b0:	70 f5       	brcc	.+92     	; 0x60e <uart_getchar+0x168>
 5b2:	a3 cf       	rjmp	.-186    	; 0x4fa <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 5b4:	96 e5       	ldi	r25, 0x56	; 86
 5b6:	89 16       	cp	r8, r25
 5b8:	93 e0       	ldi	r25, 0x03	; 3
 5ba:	99 06       	cpc	r9, r25
 5bc:	09 f0       	breq	.+2      	; 0x5c0 <uart_getchar+0x11a>
 5be:	08 f4       	brcc	.+2      	; 0x5c2 <uart_getchar+0x11c>
	      {
		uart_putchar('\b', stream);
 5c0:	9c cf       	rjmp	.-200    	; 0x4fa <uart_getchar+0x54>
 5c2:	b8 01       	movw	r22, r16
 5c4:	88 e0       	ldi	r24, 0x08	; 8
		uart_putchar(' ', stream);
 5c6:	50 df       	rcall	.-352    	; 0x468 <uart_putchar>
 5c8:	b8 01       	movw	r22, r16
 5ca:	80 e2       	ldi	r24, 0x20	; 32
		uart_putchar('\b', stream);
 5cc:	4d df       	rcall	.-358    	; 0x468 <uart_putchar>
 5ce:	b8 01       	movw	r22, r16
 5d0:	88 e0       	ldi	r24, 0x08	; 8
 5d2:	4a df       	rcall	.-364    	; 0x468 <uart_putchar>
		cp--;
 5d4:	e1 e0       	ldi	r30, 0x01	; 1
 5d6:	8e 1a       	sub	r8, r30
 5d8:	91 08       	sbc	r9, r1
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 5da:	8f cf       	rjmp	.-226    	; 0x4fa <uart_getchar+0x54>
 5dc:	b8 01       	movw	r22, r16
 5de:	8d e0       	ldi	r24, 0x0D	; 13
 5e0:	43 df       	rcall	.-378    	; 0x468 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 5e2:	f6 e5       	ldi	r31, 0x56	; 86
 5e4:	8f 16       	cp	r8, r31
 5e6:	f3 e0       	ldi	r31, 0x03	; 3
 5e8:	9f 06       	cpc	r9, r31
 5ea:	09 f0       	breq	.+2      	; 0x5ee <uart_getchar+0x148>
 5ec:	08 f4       	brcc	.+2      	; 0x5f0 <uart_getchar+0x14a>
 5ee:	85 cf       	rjmp	.-246    	; 0x4fa <uart_getchar+0x54>
 5f0:	0f 2e       	mov	r0, r31
 5f2:	f6 e5       	ldi	r31, 0x56	; 86
 5f4:	ef 2e       	mov	r14, r31
 5f6:	f3 e0       	ldi	r31, 0x03	; 3
 5f8:	ff 2e       	mov	r15, r31
	      uart_putchar(*cp2, stream);
 5fa:	f0 2d       	mov	r31, r0
 5fc:	b8 01       	movw	r22, r16
 5fe:	f7 01       	movw	r30, r14
 600:	81 91       	ld	r24, Z+
 602:	7f 01       	movw	r14, r30
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 604:	31 df       	rcall	.-414    	; 0x468 <uart_putchar>
 606:	8e 14       	cp	r8, r14
 608:	9f 04       	cpc	r9, r15
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 60a:	c1 f7       	brne	.-16     	; 0x5fc <uart_getchar+0x156>
 60c:	76 cf       	rjmp	.-276    	; 0x4fa <uart_getchar+0x54>
 60e:	b8 01       	movw	r22, r16
		uart_putchar(' ', stream);
 610:	88 e0       	ldi	r24, 0x08	; 8
 612:	2a df       	rcall	.-428    	; 0x468 <uart_putchar>
 614:	b8 01       	movw	r22, r16
 616:	80 e2       	ldi	r24, 0x20	; 32
		uart_putchar('\b', stream);
 618:	27 df       	rcall	.-434    	; 0x468 <uart_putchar>
 61a:	b8 01       	movw	r22, r16
 61c:	88 e0       	ldi	r24, 0x08	; 8
 61e:	24 df       	rcall	.-440    	; 0x468 <uart_putchar>
		cp--;
 620:	f1 e0       	ldi	r31, 0x01	; 1
 622:	8f 1a       	sub	r8, r31
 624:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 626:	86 e5       	ldi	r24, 0x56	; 86
 628:	88 16       	cp	r8, r24
 62a:	83 e0       	ldi	r24, 0x03	; 3
 62c:	98 06       	cpc	r9, r24
 62e:	79 f7       	brne	.-34     	; 0x60e <uart_getchar+0x168>
 630:	f3 01       	movw	r30, r6
 632:	31 96       	adiw	r30, 0x01	; 1
 634:	4f 01       	movw	r8, r30
 636:	61 cf       	rjmp	.-318    	; 0x4fa <uart_getchar+0x54>
 638:	74 01       	movw	r14, r8
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 63a:	f1 e0       	ldi	r31, 0x01	; 1
 63c:	ef 1a       	sub	r14, r31
 63e:	f1 08       	sbc	r15, r1
 640:	b8 01       	movw	r22, r16
		uart_putchar(' ', stream);
 642:	88 e0       	ldi	r24, 0x08	; 8
 644:	11 df       	rcall	.-478    	; 0x468 <uart_putchar>
 646:	b8 01       	movw	r22, r16
 648:	80 e2       	ldi	r24, 0x20	; 32
		uart_putchar('\b', stream);
 64a:	0e df       	rcall	.-484    	; 0x468 <uart_putchar>
 64c:	b8 01       	movw	r22, r16
 64e:	88 e0       	ldi	r24, 0x08	; 8
 650:	0b df       	rcall	.-490    	; 0x468 <uart_putchar>
		cp--;
 652:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 654:	ea 14       	cp	r14, r10
 656:	fb 04       	cpc	r15, r11
 658:	09 f4       	brne	.+2      	; 0x65c <uart_getchar+0x1b6>
 65a:	4f cf       	rjmp	.-354    	; 0x4fa <uart_getchar+0x54>
 65c:	f7 01       	movw	r30, r14
 65e:	82 91       	ld	r24, -Z
 660:	7f 01       	movw	r14, r30
 662:	80 32       	cpi	r24, 0x20	; 32
 664:	69 f7       	brne	.-38     	; 0x640 <uart_getchar+0x19a>
 666:	49 cf       	rjmp	.-366    	; 0x4fa <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
 668:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <rxp.1827>
 66c:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <rxp.1827+0x1>
 670:	cf 01       	movw	r24, r30
 672:	01 96       	adiw	r24, 0x01	; 1
 674:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <rxp.1827+0x1>
 678:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <rxp.1827>
 67c:	80 81       	ld	r24, Z
  if (c == '\n')
 67e:	8a 30       	cpi	r24, 0x0A	; 10
 680:	21 f4       	brne	.+8      	; 0x68a <uart_getchar+0x1e4>
    rxp = 0;
 682:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <rxp.1827+0x1>
 686:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <rxp.1827>

  return c;
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	08 c0       	rjmp	.+16     	; 0x69e <uart_getchar+0x1f8>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 68e:	8e ef       	ldi	r24, 0xFE	; 254
 690:	9f ef       	ldi	r25, 0xFF	; 255
 692:	05 c0       	rjmp	.+10     	; 0x69e <uart_getchar+0x1f8>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 694:	8f ef       	ldi	r24, 0xFF	; 255
 696:	9f ef       	ldi	r25, 0xFF	; 255
 698:	02 c0       	rjmp	.+4      	; 0x69e <uart_getchar+0x1f8>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 69a:	8f ef       	ldi	r24, 0xFF	; 255
 69c:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 69e:	df 91       	pop	r29
 6a0:	cf 91       	pop	r28
 6a2:	1f 91       	pop	r17
 6a4:	0f 91       	pop	r16
 6a6:	ff 90       	pop	r15
 6a8:	ef 90       	pop	r14
 6aa:	df 90       	pop	r13
 6ac:	cf 90       	pop	r12
 6ae:	bf 90       	pop	r11
 6b0:	af 90       	pop	r10
 6b2:	9f 90       	pop	r9
 6b4:	8f 90       	pop	r8
 6b6:	7f 90       	pop	r7
 6b8:	6f 90       	pop	r6
 6ba:	08 95       	ret

000006bc <__divmodhi4>:
 6bc:	97 fb       	bst	r25, 7
 6be:	07 2e       	mov	r0, r23
 6c0:	16 f4       	brtc	.+4      	; 0x6c6 <__divmodhi4+0xa>
 6c2:	00 94       	com	r0
 6c4:	06 d0       	rcall	.+12     	; 0x6d2 <__divmodhi4_neg1>
 6c6:	77 fd       	sbrc	r23, 7
 6c8:	08 d0       	rcall	.+16     	; 0x6da <__divmodhi4_neg2>
 6ca:	0b d0       	rcall	.+22     	; 0x6e2 <__udivmodhi4>
 6cc:	07 fc       	sbrc	r0, 7
 6ce:	05 d0       	rcall	.+10     	; 0x6da <__divmodhi4_neg2>
 6d0:	3e f4       	brtc	.+14     	; 0x6e0 <__divmodhi4_exit>

000006d2 <__divmodhi4_neg1>:
 6d2:	90 95       	com	r25
 6d4:	81 95       	neg	r24
 6d6:	9f 4f       	sbci	r25, 0xFF	; 255
 6d8:	08 95       	ret

000006da <__divmodhi4_neg2>:
 6da:	70 95       	com	r23
 6dc:	61 95       	neg	r22
 6de:	7f 4f       	sbci	r23, 0xFF	; 255

000006e0 <__divmodhi4_exit>:
 6e0:	08 95       	ret

000006e2 <__udivmodhi4>:
 6e2:	aa 1b       	sub	r26, r26
 6e4:	bb 1b       	sub	r27, r27
 6e6:	51 e1       	ldi	r21, 0x11	; 17
 6e8:	07 c0       	rjmp	.+14     	; 0x6f8 <__udivmodhi4_ep>

000006ea <__udivmodhi4_loop>:
 6ea:	aa 1f       	adc	r26, r26
 6ec:	bb 1f       	adc	r27, r27
 6ee:	a6 17       	cp	r26, r22
 6f0:	b7 07       	cpc	r27, r23
 6f2:	10 f0       	brcs	.+4      	; 0x6f8 <__udivmodhi4_ep>
 6f4:	a6 1b       	sub	r26, r22
 6f6:	b7 0b       	sbc	r27, r23

000006f8 <__udivmodhi4_ep>:
 6f8:	88 1f       	adc	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	5a 95       	dec	r21
 6fe:	a9 f7       	brne	.-22     	; 0x6ea <__udivmodhi4_loop>
 700:	80 95       	com	r24
 702:	90 95       	com	r25
 704:	bc 01       	movw	r22, r24
 706:	cd 01       	movw	r24, r26
 708:	08 95       	ret

0000070a <do_rand>:
 70a:	8f 92       	push	r8
 70c:	9f 92       	push	r9
 70e:	af 92       	push	r10
 710:	bf 92       	push	r11
 712:	cf 92       	push	r12
 714:	df 92       	push	r13
 716:	ef 92       	push	r14
 718:	ff 92       	push	r15
 71a:	cf 93       	push	r28
 71c:	df 93       	push	r29
 71e:	ec 01       	movw	r28, r24
 720:	68 81       	ld	r22, Y
 722:	79 81       	ldd	r23, Y+1	; 0x01
 724:	8a 81       	ldd	r24, Y+2	; 0x02
 726:	9b 81       	ldd	r25, Y+3	; 0x03
 728:	61 15       	cp	r22, r1
 72a:	71 05       	cpc	r23, r1
 72c:	81 05       	cpc	r24, r1
 72e:	91 05       	cpc	r25, r1
 730:	21 f4       	brne	.+8      	; 0x73a <do_rand+0x30>
 732:	64 e2       	ldi	r22, 0x24	; 36
 734:	79 ed       	ldi	r23, 0xD9	; 217
 736:	8b e5       	ldi	r24, 0x5B	; 91
 738:	97 e0       	ldi	r25, 0x07	; 7
 73a:	2d e1       	ldi	r18, 0x1D	; 29
 73c:	33 ef       	ldi	r19, 0xF3	; 243
 73e:	41 e0       	ldi	r20, 0x01	; 1
 740:	50 e0       	ldi	r21, 0x00	; 0
 742:	5c d3       	rcall	.+1720   	; 0xdfc <__divmodsi4>
 744:	49 01       	movw	r8, r18
 746:	5a 01       	movw	r10, r20
 748:	9b 01       	movw	r18, r22
 74a:	ac 01       	movw	r20, r24
 74c:	a7 ea       	ldi	r26, 0xA7	; 167
 74e:	b1 e4       	ldi	r27, 0x41	; 65
 750:	71 d3       	rcall	.+1762   	; 0xe34 <__muluhisi3>
 752:	6b 01       	movw	r12, r22
 754:	7c 01       	movw	r14, r24
 756:	ac ee       	ldi	r26, 0xEC	; 236
 758:	b4 ef       	ldi	r27, 0xF4	; 244
 75a:	a5 01       	movw	r20, r10
 75c:	94 01       	movw	r18, r8
 75e:	76 d3       	rcall	.+1772   	; 0xe4c <__mulohisi3>
 760:	dc 01       	movw	r26, r24
 762:	cb 01       	movw	r24, r22
 764:	8c 0d       	add	r24, r12
 766:	9d 1d       	adc	r25, r13
 768:	ae 1d       	adc	r26, r14
 76a:	bf 1d       	adc	r27, r15
 76c:	b7 ff       	sbrs	r27, 7
 76e:	03 c0       	rjmp	.+6      	; 0x776 <do_rand+0x6c>
 770:	01 97       	sbiw	r24, 0x01	; 1
 772:	a1 09       	sbc	r26, r1
 774:	b0 48       	sbci	r27, 0x80	; 128
 776:	88 83       	st	Y, r24
 778:	99 83       	std	Y+1, r25	; 0x01
 77a:	aa 83       	std	Y+2, r26	; 0x02
 77c:	bb 83       	std	Y+3, r27	; 0x03
 77e:	9f 77       	andi	r25, 0x7F	; 127
 780:	df 91       	pop	r29
 782:	cf 91       	pop	r28
 784:	ff 90       	pop	r15
 786:	ef 90       	pop	r14
 788:	df 90       	pop	r13
 78a:	cf 90       	pop	r12
 78c:	bf 90       	pop	r11
 78e:	af 90       	pop	r10
 790:	9f 90       	pop	r9
 792:	8f 90       	pop	r8
 794:	08 95       	ret

00000796 <rand_r>:
 796:	b9 cf       	rjmp	.-142    	; 0x70a <do_rand>

00000798 <rand>:
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	92 e0       	ldi	r25, 0x02	; 2
 79c:	b6 cf       	rjmp	.-148    	; 0x70a <do_rand>

0000079e <srand>:
 79e:	a0 e0       	ldi	r26, 0x00	; 0
 7a0:	b0 e0       	ldi	r27, 0x00	; 0
 7a2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 7a6:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 7aa:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 7ae:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 7b2:	08 95       	ret

000007b4 <fprintf>:
 7b4:	cf 93       	push	r28
 7b6:	df 93       	push	r29
 7b8:	cd b7       	in	r28, 0x3d	; 61
 7ba:	de b7       	in	r29, 0x3e	; 62
 7bc:	ae 01       	movw	r20, r28
 7be:	46 5f       	subi	r20, 0xF6	; 246
 7c0:	5f 4f       	sbci	r21, 0xFF	; 255
 7c2:	68 85       	ldd	r22, Y+8	; 0x08
 7c4:	79 85       	ldd	r23, Y+9	; 0x09
 7c6:	8e 81       	ldd	r24, Y+6	; 0x06
 7c8:	9f 81       	ldd	r25, Y+7	; 0x07
 7ca:	45 d0       	rcall	.+138    	; 0x856 <vfprintf>
 7cc:	df 91       	pop	r29
 7ce:	cf 91       	pop	r28
 7d0:	08 95       	ret

000007d2 <fwrite>:
 7d2:	8f 92       	push	r8
 7d4:	9f 92       	push	r9
 7d6:	af 92       	push	r10
 7d8:	bf 92       	push	r11
 7da:	cf 92       	push	r12
 7dc:	df 92       	push	r13
 7de:	ef 92       	push	r14
 7e0:	ff 92       	push	r15
 7e2:	0f 93       	push	r16
 7e4:	1f 93       	push	r17
 7e6:	cf 93       	push	r28
 7e8:	df 93       	push	r29
 7ea:	5b 01       	movw	r10, r22
 7ec:	4a 01       	movw	r8, r20
 7ee:	79 01       	movw	r14, r18
 7f0:	d9 01       	movw	r26, r18
 7f2:	13 96       	adiw	r26, 0x03	; 3
 7f4:	2c 91       	ld	r18, X
 7f6:	21 ff       	sbrs	r18, 1
 7f8:	1d c0       	rjmp	.+58     	; 0x834 <fwrite+0x62>
 7fa:	c0 e0       	ldi	r28, 0x00	; 0
 7fc:	d0 e0       	ldi	r29, 0x00	; 0
 7fe:	c8 15       	cp	r28, r8
 800:	d9 05       	cpc	r29, r9
 802:	d9 f0       	breq	.+54     	; 0x83a <fwrite+0x68>
 804:	8c 01       	movw	r16, r24
 806:	6c 01       	movw	r12, r24
 808:	ca 0c       	add	r12, r10
 80a:	db 1c       	adc	r13, r11
 80c:	c8 01       	movw	r24, r16
 80e:	0c 15       	cp	r16, r12
 810:	1d 05       	cpc	r17, r13
 812:	71 f0       	breq	.+28     	; 0x830 <fwrite+0x5e>
 814:	0f 5f       	subi	r16, 0xFF	; 255
 816:	1f 4f       	sbci	r17, 0xFF	; 255
 818:	d7 01       	movw	r26, r14
 81a:	18 96       	adiw	r26, 0x08	; 8
 81c:	ed 91       	ld	r30, X+
 81e:	fc 91       	ld	r31, X
 820:	19 97       	sbiw	r26, 0x09	; 9
 822:	b7 01       	movw	r22, r14
 824:	dc 01       	movw	r26, r24
 826:	8c 91       	ld	r24, X
 828:	19 95       	eicall
 82a:	89 2b       	or	r24, r25
 82c:	79 f3       	breq	.-34     	; 0x80c <fwrite+0x3a>
 82e:	05 c0       	rjmp	.+10     	; 0x83a <fwrite+0x68>
 830:	21 96       	adiw	r28, 0x01	; 1
 832:	e5 cf       	rjmp	.-54     	; 0x7fe <fwrite+0x2c>
 834:	80 e0       	ldi	r24, 0x00	; 0
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	01 c0       	rjmp	.+2      	; 0x83c <fwrite+0x6a>
 83a:	ce 01       	movw	r24, r28
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	1f 91       	pop	r17
 842:	0f 91       	pop	r16
 844:	ff 90       	pop	r15
 846:	ef 90       	pop	r14
 848:	df 90       	pop	r13
 84a:	cf 90       	pop	r12
 84c:	bf 90       	pop	r11
 84e:	af 90       	pop	r10
 850:	9f 90       	pop	r9
 852:	8f 90       	pop	r8
 854:	08 95       	ret

00000856 <vfprintf>:
 856:	2f 92       	push	r2
 858:	3f 92       	push	r3
 85a:	4f 92       	push	r4
 85c:	5f 92       	push	r5
 85e:	6f 92       	push	r6
 860:	7f 92       	push	r7
 862:	8f 92       	push	r8
 864:	9f 92       	push	r9
 866:	af 92       	push	r10
 868:	bf 92       	push	r11
 86a:	cf 92       	push	r12
 86c:	df 92       	push	r13
 86e:	ef 92       	push	r14
 870:	ff 92       	push	r15
 872:	0f 93       	push	r16
 874:	1f 93       	push	r17
 876:	cf 93       	push	r28
 878:	df 93       	push	r29
 87a:	cd b7       	in	r28, 0x3d	; 61
 87c:	de b7       	in	r29, 0x3e	; 62
 87e:	2b 97       	sbiw	r28, 0x0b	; 11
 880:	0f b6       	in	r0, 0x3f	; 63
 882:	f8 94       	cli
 884:	de bf       	out	0x3e, r29	; 62
 886:	0f be       	out	0x3f, r0	; 63
 888:	cd bf       	out	0x3d, r28	; 61
 88a:	6c 01       	movw	r12, r24
 88c:	7b 01       	movw	r14, r22
 88e:	8a 01       	movw	r16, r20
 890:	fc 01       	movw	r30, r24
 892:	17 82       	std	Z+7, r1	; 0x07
 894:	16 82       	std	Z+6, r1	; 0x06
 896:	83 81       	ldd	r24, Z+3	; 0x03
 898:	81 ff       	sbrs	r24, 1
 89a:	bf c1       	rjmp	.+894    	; 0xc1a <vfprintf+0x3c4>
 89c:	ce 01       	movw	r24, r28
 89e:	01 96       	adiw	r24, 0x01	; 1
 8a0:	3c 01       	movw	r6, r24
 8a2:	f6 01       	movw	r30, r12
 8a4:	93 81       	ldd	r25, Z+3	; 0x03
 8a6:	f7 01       	movw	r30, r14
 8a8:	93 fd       	sbrc	r25, 3
 8aa:	85 91       	lpm	r24, Z+
 8ac:	93 ff       	sbrs	r25, 3
 8ae:	81 91       	ld	r24, Z+
 8b0:	7f 01       	movw	r14, r30
 8b2:	88 23       	and	r24, r24
 8b4:	09 f4       	brne	.+2      	; 0x8b8 <vfprintf+0x62>
 8b6:	ad c1       	rjmp	.+858    	; 0xc12 <vfprintf+0x3bc>
 8b8:	85 32       	cpi	r24, 0x25	; 37
 8ba:	39 f4       	brne	.+14     	; 0x8ca <vfprintf+0x74>
 8bc:	93 fd       	sbrc	r25, 3
 8be:	85 91       	lpm	r24, Z+
 8c0:	93 ff       	sbrs	r25, 3
 8c2:	81 91       	ld	r24, Z+
 8c4:	7f 01       	movw	r14, r30
 8c6:	85 32       	cpi	r24, 0x25	; 37
 8c8:	21 f4       	brne	.+8      	; 0x8d2 <vfprintf+0x7c>
 8ca:	b6 01       	movw	r22, r12
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	d6 d1       	rcall	.+940    	; 0xc7c <fputc>
 8d0:	e8 cf       	rjmp	.-48     	; 0x8a2 <vfprintf+0x4c>
 8d2:	91 2c       	mov	r9, r1
 8d4:	21 2c       	mov	r2, r1
 8d6:	31 2c       	mov	r3, r1
 8d8:	ff e1       	ldi	r31, 0x1F	; 31
 8da:	f3 15       	cp	r31, r3
 8dc:	d8 f0       	brcs	.+54     	; 0x914 <vfprintf+0xbe>
 8de:	8b 32       	cpi	r24, 0x2B	; 43
 8e0:	79 f0       	breq	.+30     	; 0x900 <vfprintf+0xaa>
 8e2:	38 f4       	brcc	.+14     	; 0x8f2 <vfprintf+0x9c>
 8e4:	80 32       	cpi	r24, 0x20	; 32
 8e6:	79 f0       	breq	.+30     	; 0x906 <vfprintf+0xb0>
 8e8:	83 32       	cpi	r24, 0x23	; 35
 8ea:	a1 f4       	brne	.+40     	; 0x914 <vfprintf+0xbe>
 8ec:	23 2d       	mov	r18, r3
 8ee:	20 61       	ori	r18, 0x10	; 16
 8f0:	1d c0       	rjmp	.+58     	; 0x92c <vfprintf+0xd6>
 8f2:	8d 32       	cpi	r24, 0x2D	; 45
 8f4:	61 f0       	breq	.+24     	; 0x90e <vfprintf+0xb8>
 8f6:	80 33       	cpi	r24, 0x30	; 48
 8f8:	69 f4       	brne	.+26     	; 0x914 <vfprintf+0xbe>
 8fa:	23 2d       	mov	r18, r3
 8fc:	21 60       	ori	r18, 0x01	; 1
 8fe:	16 c0       	rjmp	.+44     	; 0x92c <vfprintf+0xd6>
 900:	83 2d       	mov	r24, r3
 902:	82 60       	ori	r24, 0x02	; 2
 904:	38 2e       	mov	r3, r24
 906:	e3 2d       	mov	r30, r3
 908:	e4 60       	ori	r30, 0x04	; 4
 90a:	3e 2e       	mov	r3, r30
 90c:	2a c0       	rjmp	.+84     	; 0x962 <vfprintf+0x10c>
 90e:	f3 2d       	mov	r31, r3
 910:	f8 60       	ori	r31, 0x08	; 8
 912:	1d c0       	rjmp	.+58     	; 0x94e <vfprintf+0xf8>
 914:	37 fc       	sbrc	r3, 7
 916:	2d c0       	rjmp	.+90     	; 0x972 <vfprintf+0x11c>
 918:	20 ed       	ldi	r18, 0xD0	; 208
 91a:	28 0f       	add	r18, r24
 91c:	2a 30       	cpi	r18, 0x0A	; 10
 91e:	40 f0       	brcs	.+16     	; 0x930 <vfprintf+0xda>
 920:	8e 32       	cpi	r24, 0x2E	; 46
 922:	b9 f4       	brne	.+46     	; 0x952 <vfprintf+0xfc>
 924:	36 fc       	sbrc	r3, 6
 926:	75 c1       	rjmp	.+746    	; 0xc12 <vfprintf+0x3bc>
 928:	23 2d       	mov	r18, r3
 92a:	20 64       	ori	r18, 0x40	; 64
 92c:	32 2e       	mov	r3, r18
 92e:	19 c0       	rjmp	.+50     	; 0x962 <vfprintf+0x10c>
 930:	36 fe       	sbrs	r3, 6
 932:	06 c0       	rjmp	.+12     	; 0x940 <vfprintf+0xea>
 934:	8a e0       	ldi	r24, 0x0A	; 10
 936:	98 9e       	mul	r9, r24
 938:	20 0d       	add	r18, r0
 93a:	11 24       	eor	r1, r1
 93c:	92 2e       	mov	r9, r18
 93e:	11 c0       	rjmp	.+34     	; 0x962 <vfprintf+0x10c>
 940:	ea e0       	ldi	r30, 0x0A	; 10
 942:	2e 9e       	mul	r2, r30
 944:	20 0d       	add	r18, r0
 946:	11 24       	eor	r1, r1
 948:	22 2e       	mov	r2, r18
 94a:	f3 2d       	mov	r31, r3
 94c:	f0 62       	ori	r31, 0x20	; 32
 94e:	3f 2e       	mov	r3, r31
 950:	08 c0       	rjmp	.+16     	; 0x962 <vfprintf+0x10c>
 952:	8c 36       	cpi	r24, 0x6C	; 108
 954:	21 f4       	brne	.+8      	; 0x95e <vfprintf+0x108>
 956:	83 2d       	mov	r24, r3
 958:	80 68       	ori	r24, 0x80	; 128
 95a:	38 2e       	mov	r3, r24
 95c:	02 c0       	rjmp	.+4      	; 0x962 <vfprintf+0x10c>
 95e:	88 36       	cpi	r24, 0x68	; 104
 960:	41 f4       	brne	.+16     	; 0x972 <vfprintf+0x11c>
 962:	f7 01       	movw	r30, r14
 964:	93 fd       	sbrc	r25, 3
 966:	85 91       	lpm	r24, Z+
 968:	93 ff       	sbrs	r25, 3
 96a:	81 91       	ld	r24, Z+
 96c:	7f 01       	movw	r14, r30
 96e:	81 11       	cpse	r24, r1
 970:	b3 cf       	rjmp	.-154    	; 0x8d8 <vfprintf+0x82>
 972:	98 2f       	mov	r25, r24
 974:	9f 7d       	andi	r25, 0xDF	; 223
 976:	95 54       	subi	r25, 0x45	; 69
 978:	93 30       	cpi	r25, 0x03	; 3
 97a:	28 f4       	brcc	.+10     	; 0x986 <vfprintf+0x130>
 97c:	0c 5f       	subi	r16, 0xFC	; 252
 97e:	1f 4f       	sbci	r17, 0xFF	; 255
 980:	9f e3       	ldi	r25, 0x3F	; 63
 982:	99 83       	std	Y+1, r25	; 0x01
 984:	0d c0       	rjmp	.+26     	; 0x9a0 <vfprintf+0x14a>
 986:	83 36       	cpi	r24, 0x63	; 99
 988:	31 f0       	breq	.+12     	; 0x996 <vfprintf+0x140>
 98a:	83 37       	cpi	r24, 0x73	; 115
 98c:	71 f0       	breq	.+28     	; 0x9aa <vfprintf+0x154>
 98e:	83 35       	cpi	r24, 0x53	; 83
 990:	09 f0       	breq	.+2      	; 0x994 <vfprintf+0x13e>
 992:	55 c0       	rjmp	.+170    	; 0xa3e <vfprintf+0x1e8>
 994:	20 c0       	rjmp	.+64     	; 0x9d6 <vfprintf+0x180>
 996:	f8 01       	movw	r30, r16
 998:	80 81       	ld	r24, Z
 99a:	89 83       	std	Y+1, r24	; 0x01
 99c:	0e 5f       	subi	r16, 0xFE	; 254
 99e:	1f 4f       	sbci	r17, 0xFF	; 255
 9a0:	88 24       	eor	r8, r8
 9a2:	83 94       	inc	r8
 9a4:	91 2c       	mov	r9, r1
 9a6:	53 01       	movw	r10, r6
 9a8:	12 c0       	rjmp	.+36     	; 0x9ce <vfprintf+0x178>
 9aa:	28 01       	movw	r4, r16
 9ac:	f2 e0       	ldi	r31, 0x02	; 2
 9ae:	4f 0e       	add	r4, r31
 9b0:	51 1c       	adc	r5, r1
 9b2:	f8 01       	movw	r30, r16
 9b4:	a0 80       	ld	r10, Z
 9b6:	b1 80       	ldd	r11, Z+1	; 0x01
 9b8:	36 fe       	sbrs	r3, 6
 9ba:	03 c0       	rjmp	.+6      	; 0x9c2 <vfprintf+0x16c>
 9bc:	69 2d       	mov	r22, r9
 9be:	70 e0       	ldi	r23, 0x00	; 0
 9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <vfprintf+0x170>
 9c2:	6f ef       	ldi	r22, 0xFF	; 255
 9c4:	7f ef       	ldi	r23, 0xFF	; 255
 9c6:	c5 01       	movw	r24, r10
 9c8:	4e d1       	rcall	.+668    	; 0xc66 <strnlen>
 9ca:	4c 01       	movw	r8, r24
 9cc:	82 01       	movw	r16, r4
 9ce:	f3 2d       	mov	r31, r3
 9d0:	ff 77       	andi	r31, 0x7F	; 127
 9d2:	3f 2e       	mov	r3, r31
 9d4:	15 c0       	rjmp	.+42     	; 0xa00 <vfprintf+0x1aa>
 9d6:	28 01       	movw	r4, r16
 9d8:	22 e0       	ldi	r18, 0x02	; 2
 9da:	42 0e       	add	r4, r18
 9dc:	51 1c       	adc	r5, r1
 9de:	f8 01       	movw	r30, r16
 9e0:	a0 80       	ld	r10, Z
 9e2:	b1 80       	ldd	r11, Z+1	; 0x01
 9e4:	36 fe       	sbrs	r3, 6
 9e6:	03 c0       	rjmp	.+6      	; 0x9ee <vfprintf+0x198>
 9e8:	69 2d       	mov	r22, r9
 9ea:	70 e0       	ldi	r23, 0x00	; 0
 9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <vfprintf+0x19c>
 9ee:	6f ef       	ldi	r22, 0xFF	; 255
 9f0:	7f ef       	ldi	r23, 0xFF	; 255
 9f2:	c5 01       	movw	r24, r10
 9f4:	2d d1       	rcall	.+602    	; 0xc50 <strnlen_P>
 9f6:	4c 01       	movw	r8, r24
 9f8:	f3 2d       	mov	r31, r3
 9fa:	f0 68       	ori	r31, 0x80	; 128
 9fc:	3f 2e       	mov	r3, r31
 9fe:	82 01       	movw	r16, r4
 a00:	33 fc       	sbrc	r3, 3
 a02:	19 c0       	rjmp	.+50     	; 0xa36 <vfprintf+0x1e0>
 a04:	82 2d       	mov	r24, r2
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	88 16       	cp	r8, r24
 a0a:	99 06       	cpc	r9, r25
 a0c:	a0 f4       	brcc	.+40     	; 0xa36 <vfprintf+0x1e0>
 a0e:	b6 01       	movw	r22, r12
 a10:	80 e2       	ldi	r24, 0x20	; 32
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	33 d1       	rcall	.+614    	; 0xc7c <fputc>
 a16:	2a 94       	dec	r2
 a18:	f5 cf       	rjmp	.-22     	; 0xa04 <vfprintf+0x1ae>
 a1a:	f5 01       	movw	r30, r10
 a1c:	37 fc       	sbrc	r3, 7
 a1e:	85 91       	lpm	r24, Z+
 a20:	37 fe       	sbrs	r3, 7
 a22:	81 91       	ld	r24, Z+
 a24:	5f 01       	movw	r10, r30
 a26:	b6 01       	movw	r22, r12
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	28 d1       	rcall	.+592    	; 0xc7c <fputc>
 a2c:	21 10       	cpse	r2, r1
 a2e:	2a 94       	dec	r2
 a30:	21 e0       	ldi	r18, 0x01	; 1
 a32:	82 1a       	sub	r8, r18
 a34:	91 08       	sbc	r9, r1
 a36:	81 14       	cp	r8, r1
 a38:	91 04       	cpc	r9, r1
 a3a:	79 f7       	brne	.-34     	; 0xa1a <vfprintf+0x1c4>
 a3c:	e1 c0       	rjmp	.+450    	; 0xc00 <vfprintf+0x3aa>
 a3e:	84 36       	cpi	r24, 0x64	; 100
 a40:	11 f0       	breq	.+4      	; 0xa46 <vfprintf+0x1f0>
 a42:	89 36       	cpi	r24, 0x69	; 105
 a44:	39 f5       	brne	.+78     	; 0xa94 <vfprintf+0x23e>
 a46:	f8 01       	movw	r30, r16
 a48:	37 fe       	sbrs	r3, 7
 a4a:	07 c0       	rjmp	.+14     	; 0xa5a <vfprintf+0x204>
 a4c:	60 81       	ld	r22, Z
 a4e:	71 81       	ldd	r23, Z+1	; 0x01
 a50:	82 81       	ldd	r24, Z+2	; 0x02
 a52:	93 81       	ldd	r25, Z+3	; 0x03
 a54:	0c 5f       	subi	r16, 0xFC	; 252
 a56:	1f 4f       	sbci	r17, 0xFF	; 255
 a58:	08 c0       	rjmp	.+16     	; 0xa6a <vfprintf+0x214>
 a5a:	60 81       	ld	r22, Z
 a5c:	71 81       	ldd	r23, Z+1	; 0x01
 a5e:	07 2e       	mov	r0, r23
 a60:	00 0c       	add	r0, r0
 a62:	88 0b       	sbc	r24, r24
 a64:	99 0b       	sbc	r25, r25
 a66:	0e 5f       	subi	r16, 0xFE	; 254
 a68:	1f 4f       	sbci	r17, 0xFF	; 255
 a6a:	f3 2d       	mov	r31, r3
 a6c:	ff 76       	andi	r31, 0x6F	; 111
 a6e:	3f 2e       	mov	r3, r31
 a70:	97 ff       	sbrs	r25, 7
 a72:	09 c0       	rjmp	.+18     	; 0xa86 <vfprintf+0x230>
 a74:	90 95       	com	r25
 a76:	80 95       	com	r24
 a78:	70 95       	com	r23
 a7a:	61 95       	neg	r22
 a7c:	7f 4f       	sbci	r23, 0xFF	; 255
 a7e:	8f 4f       	sbci	r24, 0xFF	; 255
 a80:	9f 4f       	sbci	r25, 0xFF	; 255
 a82:	f0 68       	ori	r31, 0x80	; 128
 a84:	3f 2e       	mov	r3, r31
 a86:	2a e0       	ldi	r18, 0x0A	; 10
 a88:	30 e0       	ldi	r19, 0x00	; 0
 a8a:	a3 01       	movw	r20, r6
 a8c:	33 d1       	rcall	.+614    	; 0xcf4 <__ultoa_invert>
 a8e:	88 2e       	mov	r8, r24
 a90:	86 18       	sub	r8, r6
 a92:	44 c0       	rjmp	.+136    	; 0xb1c <vfprintf+0x2c6>
 a94:	85 37       	cpi	r24, 0x75	; 117
 a96:	31 f4       	brne	.+12     	; 0xaa4 <vfprintf+0x24e>
 a98:	23 2d       	mov	r18, r3
 a9a:	2f 7e       	andi	r18, 0xEF	; 239
 a9c:	b2 2e       	mov	r11, r18
 a9e:	2a e0       	ldi	r18, 0x0A	; 10
 aa0:	30 e0       	ldi	r19, 0x00	; 0
 aa2:	25 c0       	rjmp	.+74     	; 0xaee <vfprintf+0x298>
 aa4:	93 2d       	mov	r25, r3
 aa6:	99 7f       	andi	r25, 0xF9	; 249
 aa8:	b9 2e       	mov	r11, r25
 aaa:	8f 36       	cpi	r24, 0x6F	; 111
 aac:	c1 f0       	breq	.+48     	; 0xade <vfprintf+0x288>
 aae:	18 f4       	brcc	.+6      	; 0xab6 <vfprintf+0x260>
 ab0:	88 35       	cpi	r24, 0x58	; 88
 ab2:	79 f0       	breq	.+30     	; 0xad2 <vfprintf+0x27c>
 ab4:	ae c0       	rjmp	.+348    	; 0xc12 <vfprintf+0x3bc>
 ab6:	80 37       	cpi	r24, 0x70	; 112
 ab8:	19 f0       	breq	.+6      	; 0xac0 <vfprintf+0x26a>
 aba:	88 37       	cpi	r24, 0x78	; 120
 abc:	21 f0       	breq	.+8      	; 0xac6 <vfprintf+0x270>
 abe:	a9 c0       	rjmp	.+338    	; 0xc12 <vfprintf+0x3bc>
 ac0:	e9 2f       	mov	r30, r25
 ac2:	e0 61       	ori	r30, 0x10	; 16
 ac4:	be 2e       	mov	r11, r30
 ac6:	b4 fe       	sbrs	r11, 4
 ac8:	0d c0       	rjmp	.+26     	; 0xae4 <vfprintf+0x28e>
 aca:	fb 2d       	mov	r31, r11
 acc:	f4 60       	ori	r31, 0x04	; 4
 ace:	bf 2e       	mov	r11, r31
 ad0:	09 c0       	rjmp	.+18     	; 0xae4 <vfprintf+0x28e>
 ad2:	34 fe       	sbrs	r3, 4
 ad4:	0a c0       	rjmp	.+20     	; 0xaea <vfprintf+0x294>
 ad6:	29 2f       	mov	r18, r25
 ad8:	26 60       	ori	r18, 0x06	; 6
 ada:	b2 2e       	mov	r11, r18
 adc:	06 c0       	rjmp	.+12     	; 0xaea <vfprintf+0x294>
 ade:	28 e0       	ldi	r18, 0x08	; 8
 ae0:	30 e0       	ldi	r19, 0x00	; 0
 ae2:	05 c0       	rjmp	.+10     	; 0xaee <vfprintf+0x298>
 ae4:	20 e1       	ldi	r18, 0x10	; 16
 ae6:	30 e0       	ldi	r19, 0x00	; 0
 ae8:	02 c0       	rjmp	.+4      	; 0xaee <vfprintf+0x298>
 aea:	20 e1       	ldi	r18, 0x10	; 16
 aec:	32 e0       	ldi	r19, 0x02	; 2
 aee:	f8 01       	movw	r30, r16
 af0:	b7 fe       	sbrs	r11, 7
 af2:	07 c0       	rjmp	.+14     	; 0xb02 <vfprintf+0x2ac>
 af4:	60 81       	ld	r22, Z
 af6:	71 81       	ldd	r23, Z+1	; 0x01
 af8:	82 81       	ldd	r24, Z+2	; 0x02
 afa:	93 81       	ldd	r25, Z+3	; 0x03
 afc:	0c 5f       	subi	r16, 0xFC	; 252
 afe:	1f 4f       	sbci	r17, 0xFF	; 255
 b00:	06 c0       	rjmp	.+12     	; 0xb0e <vfprintf+0x2b8>
 b02:	60 81       	ld	r22, Z
 b04:	71 81       	ldd	r23, Z+1	; 0x01
 b06:	80 e0       	ldi	r24, 0x00	; 0
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	0e 5f       	subi	r16, 0xFE	; 254
 b0c:	1f 4f       	sbci	r17, 0xFF	; 255
 b0e:	a3 01       	movw	r20, r6
 b10:	f1 d0       	rcall	.+482    	; 0xcf4 <__ultoa_invert>
 b12:	88 2e       	mov	r8, r24
 b14:	86 18       	sub	r8, r6
 b16:	fb 2d       	mov	r31, r11
 b18:	ff 77       	andi	r31, 0x7F	; 127
 b1a:	3f 2e       	mov	r3, r31
 b1c:	36 fe       	sbrs	r3, 6
 b1e:	0d c0       	rjmp	.+26     	; 0xb3a <vfprintf+0x2e4>
 b20:	23 2d       	mov	r18, r3
 b22:	2e 7f       	andi	r18, 0xFE	; 254
 b24:	a2 2e       	mov	r10, r18
 b26:	89 14       	cp	r8, r9
 b28:	58 f4       	brcc	.+22     	; 0xb40 <vfprintf+0x2ea>
 b2a:	34 fe       	sbrs	r3, 4
 b2c:	0b c0       	rjmp	.+22     	; 0xb44 <vfprintf+0x2ee>
 b2e:	32 fc       	sbrc	r3, 2
 b30:	09 c0       	rjmp	.+18     	; 0xb44 <vfprintf+0x2ee>
 b32:	83 2d       	mov	r24, r3
 b34:	8e 7e       	andi	r24, 0xEE	; 238
 b36:	a8 2e       	mov	r10, r24
 b38:	05 c0       	rjmp	.+10     	; 0xb44 <vfprintf+0x2ee>
 b3a:	b8 2c       	mov	r11, r8
 b3c:	a3 2c       	mov	r10, r3
 b3e:	03 c0       	rjmp	.+6      	; 0xb46 <vfprintf+0x2f0>
 b40:	b8 2c       	mov	r11, r8
 b42:	01 c0       	rjmp	.+2      	; 0xb46 <vfprintf+0x2f0>
 b44:	b9 2c       	mov	r11, r9
 b46:	a4 fe       	sbrs	r10, 4
 b48:	0f c0       	rjmp	.+30     	; 0xb68 <vfprintf+0x312>
 b4a:	fe 01       	movw	r30, r28
 b4c:	e8 0d       	add	r30, r8
 b4e:	f1 1d       	adc	r31, r1
 b50:	80 81       	ld	r24, Z
 b52:	80 33       	cpi	r24, 0x30	; 48
 b54:	21 f4       	brne	.+8      	; 0xb5e <vfprintf+0x308>
 b56:	9a 2d       	mov	r25, r10
 b58:	99 7e       	andi	r25, 0xE9	; 233
 b5a:	a9 2e       	mov	r10, r25
 b5c:	09 c0       	rjmp	.+18     	; 0xb70 <vfprintf+0x31a>
 b5e:	a2 fe       	sbrs	r10, 2
 b60:	06 c0       	rjmp	.+12     	; 0xb6e <vfprintf+0x318>
 b62:	b3 94       	inc	r11
 b64:	b3 94       	inc	r11
 b66:	04 c0       	rjmp	.+8      	; 0xb70 <vfprintf+0x31a>
 b68:	8a 2d       	mov	r24, r10
 b6a:	86 78       	andi	r24, 0x86	; 134
 b6c:	09 f0       	breq	.+2      	; 0xb70 <vfprintf+0x31a>
 b6e:	b3 94       	inc	r11
 b70:	a3 fc       	sbrc	r10, 3
 b72:	10 c0       	rjmp	.+32     	; 0xb94 <vfprintf+0x33e>
 b74:	a0 fe       	sbrs	r10, 0
 b76:	06 c0       	rjmp	.+12     	; 0xb84 <vfprintf+0x32e>
 b78:	b2 14       	cp	r11, r2
 b7a:	80 f4       	brcc	.+32     	; 0xb9c <vfprintf+0x346>
 b7c:	28 0c       	add	r2, r8
 b7e:	92 2c       	mov	r9, r2
 b80:	9b 18       	sub	r9, r11
 b82:	0d c0       	rjmp	.+26     	; 0xb9e <vfprintf+0x348>
 b84:	b2 14       	cp	r11, r2
 b86:	58 f4       	brcc	.+22     	; 0xb9e <vfprintf+0x348>
 b88:	b6 01       	movw	r22, r12
 b8a:	80 e2       	ldi	r24, 0x20	; 32
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	76 d0       	rcall	.+236    	; 0xc7c <fputc>
 b90:	b3 94       	inc	r11
 b92:	f8 cf       	rjmp	.-16     	; 0xb84 <vfprintf+0x32e>
 b94:	b2 14       	cp	r11, r2
 b96:	18 f4       	brcc	.+6      	; 0xb9e <vfprintf+0x348>
 b98:	2b 18       	sub	r2, r11
 b9a:	02 c0       	rjmp	.+4      	; 0xba0 <vfprintf+0x34a>
 b9c:	98 2c       	mov	r9, r8
 b9e:	21 2c       	mov	r2, r1
 ba0:	a4 fe       	sbrs	r10, 4
 ba2:	0f c0       	rjmp	.+30     	; 0xbc2 <vfprintf+0x36c>
 ba4:	b6 01       	movw	r22, r12
 ba6:	80 e3       	ldi	r24, 0x30	; 48
 ba8:	90 e0       	ldi	r25, 0x00	; 0
 baa:	68 d0       	rcall	.+208    	; 0xc7c <fputc>
 bac:	a2 fe       	sbrs	r10, 2
 bae:	16 c0       	rjmp	.+44     	; 0xbdc <vfprintf+0x386>
 bb0:	a1 fc       	sbrc	r10, 1
 bb2:	03 c0       	rjmp	.+6      	; 0xbba <vfprintf+0x364>
 bb4:	88 e7       	ldi	r24, 0x78	; 120
 bb6:	90 e0       	ldi	r25, 0x00	; 0
 bb8:	02 c0       	rjmp	.+4      	; 0xbbe <vfprintf+0x368>
 bba:	88 e5       	ldi	r24, 0x58	; 88
 bbc:	90 e0       	ldi	r25, 0x00	; 0
 bbe:	b6 01       	movw	r22, r12
 bc0:	0c c0       	rjmp	.+24     	; 0xbda <vfprintf+0x384>
 bc2:	8a 2d       	mov	r24, r10
 bc4:	86 78       	andi	r24, 0x86	; 134
 bc6:	51 f0       	breq	.+20     	; 0xbdc <vfprintf+0x386>
 bc8:	a1 fe       	sbrs	r10, 1
 bca:	02 c0       	rjmp	.+4      	; 0xbd0 <vfprintf+0x37a>
 bcc:	8b e2       	ldi	r24, 0x2B	; 43
 bce:	01 c0       	rjmp	.+2      	; 0xbd2 <vfprintf+0x37c>
 bd0:	80 e2       	ldi	r24, 0x20	; 32
 bd2:	a7 fc       	sbrc	r10, 7
 bd4:	8d e2       	ldi	r24, 0x2D	; 45
 bd6:	b6 01       	movw	r22, r12
 bd8:	90 e0       	ldi	r25, 0x00	; 0
 bda:	50 d0       	rcall	.+160    	; 0xc7c <fputc>
 bdc:	89 14       	cp	r8, r9
 bde:	30 f4       	brcc	.+12     	; 0xbec <vfprintf+0x396>
 be0:	b6 01       	movw	r22, r12
 be2:	80 e3       	ldi	r24, 0x30	; 48
 be4:	90 e0       	ldi	r25, 0x00	; 0
 be6:	4a d0       	rcall	.+148    	; 0xc7c <fputc>
 be8:	9a 94       	dec	r9
 bea:	f8 cf       	rjmp	.-16     	; 0xbdc <vfprintf+0x386>
 bec:	8a 94       	dec	r8
 bee:	f3 01       	movw	r30, r6
 bf0:	e8 0d       	add	r30, r8
 bf2:	f1 1d       	adc	r31, r1
 bf4:	80 81       	ld	r24, Z
 bf6:	b6 01       	movw	r22, r12
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	40 d0       	rcall	.+128    	; 0xc7c <fputc>
 bfc:	81 10       	cpse	r8, r1
 bfe:	f6 cf       	rjmp	.-20     	; 0xbec <vfprintf+0x396>
 c00:	22 20       	and	r2, r2
 c02:	09 f4       	brne	.+2      	; 0xc06 <vfprintf+0x3b0>
 c04:	4e ce       	rjmp	.-868    	; 0x8a2 <vfprintf+0x4c>
 c06:	b6 01       	movw	r22, r12
 c08:	80 e2       	ldi	r24, 0x20	; 32
 c0a:	90 e0       	ldi	r25, 0x00	; 0
 c0c:	37 d0       	rcall	.+110    	; 0xc7c <fputc>
 c0e:	2a 94       	dec	r2
 c10:	f7 cf       	rjmp	.-18     	; 0xc00 <vfprintf+0x3aa>
 c12:	f6 01       	movw	r30, r12
 c14:	86 81       	ldd	r24, Z+6	; 0x06
 c16:	97 81       	ldd	r25, Z+7	; 0x07
 c18:	02 c0       	rjmp	.+4      	; 0xc1e <vfprintf+0x3c8>
 c1a:	8f ef       	ldi	r24, 0xFF	; 255
 c1c:	9f ef       	ldi	r25, 0xFF	; 255
 c1e:	2b 96       	adiw	r28, 0x0b	; 11
 c20:	0f b6       	in	r0, 0x3f	; 63
 c22:	f8 94       	cli
 c24:	de bf       	out	0x3e, r29	; 62
 c26:	0f be       	out	0x3f, r0	; 63
 c28:	cd bf       	out	0x3d, r28	; 61
 c2a:	df 91       	pop	r29
 c2c:	cf 91       	pop	r28
 c2e:	1f 91       	pop	r17
 c30:	0f 91       	pop	r16
 c32:	ff 90       	pop	r15
 c34:	ef 90       	pop	r14
 c36:	df 90       	pop	r13
 c38:	cf 90       	pop	r12
 c3a:	bf 90       	pop	r11
 c3c:	af 90       	pop	r10
 c3e:	9f 90       	pop	r9
 c40:	8f 90       	pop	r8
 c42:	7f 90       	pop	r7
 c44:	6f 90       	pop	r6
 c46:	5f 90       	pop	r5
 c48:	4f 90       	pop	r4
 c4a:	3f 90       	pop	r3
 c4c:	2f 90       	pop	r2
 c4e:	08 95       	ret

00000c50 <strnlen_P>:
 c50:	fc 01       	movw	r30, r24
 c52:	05 90       	lpm	r0, Z+
 c54:	61 50       	subi	r22, 0x01	; 1
 c56:	70 40       	sbci	r23, 0x00	; 0
 c58:	01 10       	cpse	r0, r1
 c5a:	d8 f7       	brcc	.-10     	; 0xc52 <strnlen_P+0x2>
 c5c:	80 95       	com	r24
 c5e:	90 95       	com	r25
 c60:	8e 0f       	add	r24, r30
 c62:	9f 1f       	adc	r25, r31
 c64:	08 95       	ret

00000c66 <strnlen>:
 c66:	fc 01       	movw	r30, r24
 c68:	61 50       	subi	r22, 0x01	; 1
 c6a:	70 40       	sbci	r23, 0x00	; 0
 c6c:	01 90       	ld	r0, Z+
 c6e:	01 10       	cpse	r0, r1
 c70:	d8 f7       	brcc	.-10     	; 0xc68 <strnlen+0x2>
 c72:	80 95       	com	r24
 c74:	90 95       	com	r25
 c76:	8e 0f       	add	r24, r30
 c78:	9f 1f       	adc	r25, r31
 c7a:	08 95       	ret

00000c7c <fputc>:
 c7c:	0f 93       	push	r16
 c7e:	1f 93       	push	r17
 c80:	cf 93       	push	r28
 c82:	df 93       	push	r29
 c84:	fb 01       	movw	r30, r22
 c86:	23 81       	ldd	r18, Z+3	; 0x03
 c88:	21 fd       	sbrc	r18, 1
 c8a:	03 c0       	rjmp	.+6      	; 0xc92 <fputc+0x16>
 c8c:	8f ef       	ldi	r24, 0xFF	; 255
 c8e:	9f ef       	ldi	r25, 0xFF	; 255
 c90:	2c c0       	rjmp	.+88     	; 0xcea <fputc+0x6e>
 c92:	22 ff       	sbrs	r18, 2
 c94:	16 c0       	rjmp	.+44     	; 0xcc2 <fputc+0x46>
 c96:	46 81       	ldd	r20, Z+6	; 0x06
 c98:	57 81       	ldd	r21, Z+7	; 0x07
 c9a:	24 81       	ldd	r18, Z+4	; 0x04
 c9c:	35 81       	ldd	r19, Z+5	; 0x05
 c9e:	42 17       	cp	r20, r18
 ca0:	53 07       	cpc	r21, r19
 ca2:	44 f4       	brge	.+16     	; 0xcb4 <fputc+0x38>
 ca4:	a0 81       	ld	r26, Z
 ca6:	b1 81       	ldd	r27, Z+1	; 0x01
 ca8:	9d 01       	movw	r18, r26
 caa:	2f 5f       	subi	r18, 0xFF	; 255
 cac:	3f 4f       	sbci	r19, 0xFF	; 255
 cae:	31 83       	std	Z+1, r19	; 0x01
 cb0:	20 83       	st	Z, r18
 cb2:	8c 93       	st	X, r24
 cb4:	26 81       	ldd	r18, Z+6	; 0x06
 cb6:	37 81       	ldd	r19, Z+7	; 0x07
 cb8:	2f 5f       	subi	r18, 0xFF	; 255
 cba:	3f 4f       	sbci	r19, 0xFF	; 255
 cbc:	37 83       	std	Z+7, r19	; 0x07
 cbe:	26 83       	std	Z+6, r18	; 0x06
 cc0:	14 c0       	rjmp	.+40     	; 0xcea <fputc+0x6e>
 cc2:	8b 01       	movw	r16, r22
 cc4:	ec 01       	movw	r28, r24
 cc6:	fb 01       	movw	r30, r22
 cc8:	00 84       	ldd	r0, Z+8	; 0x08
 cca:	f1 85       	ldd	r31, Z+9	; 0x09
 ccc:	e0 2d       	mov	r30, r0
 cce:	19 95       	eicall
 cd0:	89 2b       	or	r24, r25
 cd2:	e1 f6       	brne	.-72     	; 0xc8c <fputc+0x10>
 cd4:	d8 01       	movw	r26, r16
 cd6:	16 96       	adiw	r26, 0x06	; 6
 cd8:	8d 91       	ld	r24, X+
 cda:	9c 91       	ld	r25, X
 cdc:	17 97       	sbiw	r26, 0x07	; 7
 cde:	01 96       	adiw	r24, 0x01	; 1
 ce0:	17 96       	adiw	r26, 0x07	; 7
 ce2:	9c 93       	st	X, r25
 ce4:	8e 93       	st	-X, r24
 ce6:	16 97       	sbiw	r26, 0x06	; 6
 ce8:	ce 01       	movw	r24, r28
 cea:	df 91       	pop	r29
 cec:	cf 91       	pop	r28
 cee:	1f 91       	pop	r17
 cf0:	0f 91       	pop	r16
 cf2:	08 95       	ret

00000cf4 <__ultoa_invert>:
 cf4:	fa 01       	movw	r30, r20
 cf6:	aa 27       	eor	r26, r26
 cf8:	28 30       	cpi	r18, 0x08	; 8
 cfa:	51 f1       	breq	.+84     	; 0xd50 <__ultoa_invert+0x5c>
 cfc:	20 31       	cpi	r18, 0x10	; 16
 cfe:	81 f1       	breq	.+96     	; 0xd60 <__ultoa_invert+0x6c>
 d00:	e8 94       	clt
 d02:	6f 93       	push	r22
 d04:	6e 7f       	andi	r22, 0xFE	; 254
 d06:	6e 5f       	subi	r22, 0xFE	; 254
 d08:	7f 4f       	sbci	r23, 0xFF	; 255
 d0a:	8f 4f       	sbci	r24, 0xFF	; 255
 d0c:	9f 4f       	sbci	r25, 0xFF	; 255
 d0e:	af 4f       	sbci	r26, 0xFF	; 255
 d10:	b1 e0       	ldi	r27, 0x01	; 1
 d12:	3e d0       	rcall	.+124    	; 0xd90 <__ultoa_invert+0x9c>
 d14:	b4 e0       	ldi	r27, 0x04	; 4
 d16:	3c d0       	rcall	.+120    	; 0xd90 <__ultoa_invert+0x9c>
 d18:	67 0f       	add	r22, r23
 d1a:	78 1f       	adc	r23, r24
 d1c:	89 1f       	adc	r24, r25
 d1e:	9a 1f       	adc	r25, r26
 d20:	a1 1d       	adc	r26, r1
 d22:	68 0f       	add	r22, r24
 d24:	79 1f       	adc	r23, r25
 d26:	8a 1f       	adc	r24, r26
 d28:	91 1d       	adc	r25, r1
 d2a:	a1 1d       	adc	r26, r1
 d2c:	6a 0f       	add	r22, r26
 d2e:	71 1d       	adc	r23, r1
 d30:	81 1d       	adc	r24, r1
 d32:	91 1d       	adc	r25, r1
 d34:	a1 1d       	adc	r26, r1
 d36:	20 d0       	rcall	.+64     	; 0xd78 <__ultoa_invert+0x84>
 d38:	09 f4       	brne	.+2      	; 0xd3c <__ultoa_invert+0x48>
 d3a:	68 94       	set
 d3c:	3f 91       	pop	r19
 d3e:	2a e0       	ldi	r18, 0x0A	; 10
 d40:	26 9f       	mul	r18, r22
 d42:	11 24       	eor	r1, r1
 d44:	30 19       	sub	r19, r0
 d46:	30 5d       	subi	r19, 0xD0	; 208
 d48:	31 93       	st	Z+, r19
 d4a:	de f6       	brtc	.-74     	; 0xd02 <__ultoa_invert+0xe>
 d4c:	cf 01       	movw	r24, r30
 d4e:	08 95       	ret
 d50:	46 2f       	mov	r20, r22
 d52:	47 70       	andi	r20, 0x07	; 7
 d54:	40 5d       	subi	r20, 0xD0	; 208
 d56:	41 93       	st	Z+, r20
 d58:	b3 e0       	ldi	r27, 0x03	; 3
 d5a:	0f d0       	rcall	.+30     	; 0xd7a <__ultoa_invert+0x86>
 d5c:	c9 f7       	brne	.-14     	; 0xd50 <__ultoa_invert+0x5c>
 d5e:	f6 cf       	rjmp	.-20     	; 0xd4c <__ultoa_invert+0x58>
 d60:	46 2f       	mov	r20, r22
 d62:	4f 70       	andi	r20, 0x0F	; 15
 d64:	40 5d       	subi	r20, 0xD0	; 208
 d66:	4a 33       	cpi	r20, 0x3A	; 58
 d68:	18 f0       	brcs	.+6      	; 0xd70 <__ultoa_invert+0x7c>
 d6a:	49 5d       	subi	r20, 0xD9	; 217
 d6c:	31 fd       	sbrc	r19, 1
 d6e:	40 52       	subi	r20, 0x20	; 32
 d70:	41 93       	st	Z+, r20
 d72:	02 d0       	rcall	.+4      	; 0xd78 <__ultoa_invert+0x84>
 d74:	a9 f7       	brne	.-22     	; 0xd60 <__ultoa_invert+0x6c>
 d76:	ea cf       	rjmp	.-44     	; 0xd4c <__ultoa_invert+0x58>
 d78:	b4 e0       	ldi	r27, 0x04	; 4
 d7a:	a6 95       	lsr	r26
 d7c:	97 95       	ror	r25
 d7e:	87 95       	ror	r24
 d80:	77 95       	ror	r23
 d82:	67 95       	ror	r22
 d84:	ba 95       	dec	r27
 d86:	c9 f7       	brne	.-14     	; 0xd7a <__ultoa_invert+0x86>
 d88:	00 97       	sbiw	r24, 0x00	; 0
 d8a:	61 05       	cpc	r22, r1
 d8c:	71 05       	cpc	r23, r1
 d8e:	08 95       	ret
 d90:	9b 01       	movw	r18, r22
 d92:	ac 01       	movw	r20, r24
 d94:	0a 2e       	mov	r0, r26
 d96:	06 94       	lsr	r0
 d98:	57 95       	ror	r21
 d9a:	47 95       	ror	r20
 d9c:	37 95       	ror	r19
 d9e:	27 95       	ror	r18
 da0:	ba 95       	dec	r27
 da2:	c9 f7       	brne	.-14     	; 0xd96 <__ultoa_invert+0xa2>
 da4:	62 0f       	add	r22, r18
 da6:	73 1f       	adc	r23, r19
 da8:	84 1f       	adc	r24, r20
 daa:	95 1f       	adc	r25, r21
 dac:	a0 1d       	adc	r26, r0
 dae:	08 95       	ret

00000db0 <eeprom_read_word>:
 db0:	a8 e1       	ldi	r26, 0x18	; 24
 db2:	b0 e0       	ldi	r27, 0x00	; 0
 db4:	42 e0       	ldi	r20, 0x02	; 2
 db6:	50 e0       	ldi	r21, 0x00	; 0
 db8:	05 c0       	rjmp	.+10     	; 0xdc4 <eeprom_read_blraw>

00000dba <eeprom_write_word>:
 dba:	12 d0       	rcall	.+36     	; 0xde0 <eeprom_write_byte>
 dbc:	27 2f       	mov	r18, r23
 dbe:	11 c0       	rjmp	.+34     	; 0xde2 <eeprom_write_r18>

00000dc0 <eeprom_read_block>:
 dc0:	dc 01       	movw	r26, r24
 dc2:	cb 01       	movw	r24, r22

00000dc4 <eeprom_read_blraw>:
 dc4:	fc 01       	movw	r30, r24
 dc6:	f9 99       	sbic	0x1f, 1	; 31
 dc8:	fe cf       	rjmp	.-4      	; 0xdc6 <eeprom_read_blraw+0x2>
 dca:	06 c0       	rjmp	.+12     	; 0xdd8 <eeprom_read_blraw+0x14>
 dcc:	f2 bd       	out	0x22, r31	; 34
 dce:	e1 bd       	out	0x21, r30	; 33
 dd0:	f8 9a       	sbi	0x1f, 0	; 31
 dd2:	31 96       	adiw	r30, 0x01	; 1
 dd4:	00 b4       	in	r0, 0x20	; 32
 dd6:	0d 92       	st	X+, r0
 dd8:	41 50       	subi	r20, 0x01	; 1
 dda:	50 40       	sbci	r21, 0x00	; 0
 ddc:	b8 f7       	brcc	.-18     	; 0xdcc <eeprom_read_blraw+0x8>
 dde:	08 95       	ret

00000de0 <eeprom_write_byte>:
 de0:	26 2f       	mov	r18, r22

00000de2 <eeprom_write_r18>:
 de2:	f9 99       	sbic	0x1f, 1	; 31
 de4:	fe cf       	rjmp	.-4      	; 0xde2 <eeprom_write_r18>
 de6:	1f ba       	out	0x1f, r1	; 31
 de8:	92 bd       	out	0x22, r25	; 34
 dea:	81 bd       	out	0x21, r24	; 33
 dec:	20 bd       	out	0x20, r18	; 32
 dee:	0f b6       	in	r0, 0x3f	; 63
 df0:	f8 94       	cli
 df2:	fa 9a       	sbi	0x1f, 2	; 31
 df4:	f9 9a       	sbi	0x1f, 1	; 31
 df6:	0f be       	out	0x3f, r0	; 63
 df8:	01 96       	adiw	r24, 0x01	; 1
 dfa:	08 95       	ret

00000dfc <__divmodsi4>:
 dfc:	05 2e       	mov	r0, r21
 dfe:	97 fb       	bst	r25, 7
 e00:	16 f4       	brtc	.+4      	; 0xe06 <__divmodsi4+0xa>
 e02:	00 94       	com	r0
 e04:	0f d0       	rcall	.+30     	; 0xe24 <__negsi2>
 e06:	57 fd       	sbrc	r21, 7
 e08:	05 d0       	rcall	.+10     	; 0xe14 <__divmodsi4_neg2>
 e0a:	24 d0       	rcall	.+72     	; 0xe54 <__udivmodsi4>
 e0c:	07 fc       	sbrc	r0, 7
 e0e:	02 d0       	rcall	.+4      	; 0xe14 <__divmodsi4_neg2>
 e10:	46 f4       	brtc	.+16     	; 0xe22 <__divmodsi4_exit>
 e12:	08 c0       	rjmp	.+16     	; 0xe24 <__negsi2>

00000e14 <__divmodsi4_neg2>:
 e14:	50 95       	com	r21
 e16:	40 95       	com	r20
 e18:	30 95       	com	r19
 e1a:	21 95       	neg	r18
 e1c:	3f 4f       	sbci	r19, 0xFF	; 255
 e1e:	4f 4f       	sbci	r20, 0xFF	; 255
 e20:	5f 4f       	sbci	r21, 0xFF	; 255

00000e22 <__divmodsi4_exit>:
 e22:	08 95       	ret

00000e24 <__negsi2>:
 e24:	90 95       	com	r25
 e26:	80 95       	com	r24
 e28:	70 95       	com	r23
 e2a:	61 95       	neg	r22
 e2c:	7f 4f       	sbci	r23, 0xFF	; 255
 e2e:	8f 4f       	sbci	r24, 0xFF	; 255
 e30:	9f 4f       	sbci	r25, 0xFF	; 255
 e32:	08 95       	ret

00000e34 <__muluhisi3>:
 e34:	31 d0       	rcall	.+98     	; 0xe98 <__umulhisi3>
 e36:	a5 9f       	mul	r26, r21
 e38:	90 0d       	add	r25, r0
 e3a:	b4 9f       	mul	r27, r20
 e3c:	90 0d       	add	r25, r0
 e3e:	a4 9f       	mul	r26, r20
 e40:	80 0d       	add	r24, r0
 e42:	91 1d       	adc	r25, r1
 e44:	11 24       	eor	r1, r1
 e46:	08 95       	ret

00000e48 <__mulshisi3>:
 e48:	b7 ff       	sbrs	r27, 7
 e4a:	f4 cf       	rjmp	.-24     	; 0xe34 <__muluhisi3>

00000e4c <__mulohisi3>:
 e4c:	f3 df       	rcall	.-26     	; 0xe34 <__muluhisi3>
 e4e:	82 1b       	sub	r24, r18
 e50:	93 0b       	sbc	r25, r19
 e52:	08 95       	ret

00000e54 <__udivmodsi4>:
 e54:	a1 e2       	ldi	r26, 0x21	; 33
 e56:	1a 2e       	mov	r1, r26
 e58:	aa 1b       	sub	r26, r26
 e5a:	bb 1b       	sub	r27, r27
 e5c:	fd 01       	movw	r30, r26
 e5e:	0d c0       	rjmp	.+26     	; 0xe7a <__udivmodsi4_ep>

00000e60 <__udivmodsi4_loop>:
 e60:	aa 1f       	adc	r26, r26
 e62:	bb 1f       	adc	r27, r27
 e64:	ee 1f       	adc	r30, r30
 e66:	ff 1f       	adc	r31, r31
 e68:	a2 17       	cp	r26, r18
 e6a:	b3 07       	cpc	r27, r19
 e6c:	e4 07       	cpc	r30, r20
 e6e:	f5 07       	cpc	r31, r21
 e70:	20 f0       	brcs	.+8      	; 0xe7a <__udivmodsi4_ep>
 e72:	a2 1b       	sub	r26, r18
 e74:	b3 0b       	sbc	r27, r19
 e76:	e4 0b       	sbc	r30, r20
 e78:	f5 0b       	sbc	r31, r21

00000e7a <__udivmodsi4_ep>:
 e7a:	66 1f       	adc	r22, r22
 e7c:	77 1f       	adc	r23, r23
 e7e:	88 1f       	adc	r24, r24
 e80:	99 1f       	adc	r25, r25
 e82:	1a 94       	dec	r1
 e84:	69 f7       	brne	.-38     	; 0xe60 <__udivmodsi4_loop>
 e86:	60 95       	com	r22
 e88:	70 95       	com	r23
 e8a:	80 95       	com	r24
 e8c:	90 95       	com	r25
 e8e:	9b 01       	movw	r18, r22
 e90:	ac 01       	movw	r20, r24
 e92:	bd 01       	movw	r22, r26
 e94:	cf 01       	movw	r24, r30
 e96:	08 95       	ret

00000e98 <__umulhisi3>:
 e98:	a2 9f       	mul	r26, r18
 e9a:	b0 01       	movw	r22, r0
 e9c:	b3 9f       	mul	r27, r19
 e9e:	c0 01       	movw	r24, r0
 ea0:	a3 9f       	mul	r26, r19
 ea2:	70 0d       	add	r23, r0
 ea4:	81 1d       	adc	r24, r1
 ea6:	11 24       	eor	r1, r1
 ea8:	91 1d       	adc	r25, r1
 eaa:	b2 9f       	mul	r27, r18
 eac:	70 0d       	add	r23, r0
 eae:	81 1d       	adc	r24, r1
 eb0:	11 24       	eor	r1, r1
 eb2:	91 1d       	adc	r25, r1
 eb4:	08 95       	ret

00000eb6 <_exit>:
 eb6:	f8 94       	cli

00000eb8 <__stop_program>:
 eb8:	ff cf       	rjmp	.-2      	; 0xeb8 <__stop_program>
