
HumanReactionTime.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fa  00800200  00000e32  00000ec6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  008002fa  008002fa  00000fc0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000101c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00001060  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000173e  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eef  00000000  00000000  00002896  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000993  00000000  00000000  00003785  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00004118  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000679  00000000  00000000  00004250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b3  00000000  00000000  000048c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00004c7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	92 c0       	rjmp	.+292    	; 0x17a <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e3       	ldi	r30, 0x32	; 50
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 3f       	cpi	r26, 0xFA	; 250
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	aa ef       	ldi	r26, 0xFA	; 250
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 35       	cpi	r26, 0x5E	; 94
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	48 d1       	rcall	.+656    	; 0x3b0 <main>
 120:	86 c6       	rjmp	.+3340   	; 0xe2e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initialize>:
// putchar y getchar están en uart.c
FILE uart_str = FDEV_SETUP_STREAM(uart_putchar, uart_getchar, _FDEV_SETUP_RW);

void initialize(void){
	//configurar los puertos
	DDRD = 0x00;			// todos los puertos DDRD como entrada
 124:	1a b8       	out	0x0a, r1	; 10
	DDRC = 0xff;	 		// todos los puertos DDRC como salida
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	87 b9       	out	0x07, r24	; 7
	//OCR0A=16000000/(64*1000)-1=249
	//OCR0A: carga el valor hasta el cual se quiere que llegue el registro TCNT0 el el modo CTN
	OCR0A = 249;
 12a:	89 ef       	ldi	r24, 0xF9	; 249
 12c:	87 bd       	out	0x27, r24	; 39
	TIMSK0= (1<<OCIE0A);	//turn on timer 0 cmp match ISR
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
	//Envia al prescaler el valor de 64
	//pone a CS02=0    CS01=1    CS00=1  activa  los dos primeros bits del registro TCCR0B
	TCCR0B= 3;				//elige el presaclar a utilizar para obtener en cuanto tiempo se quiere que el registro TCNT0
 134:	93 e0       	ldi	r25, 0x03	; 3
 136:	95 bd       	out	0x25, r25	; 37
	//sea igual al registro OCR0A
	// turn on clear-on-match
	TCCR0A= (1<<WGM01) ;
 138:	84 bd       	out	0x24, r24	; 36
	Tiempo_espe=0;
 13a:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <Tiempo_espe+0x1>
 13e:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <Tiempo_espe>
	PushState = NoPush;
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <PushState>
	state = 0; //progama inicia en 0
 148:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <state+0x1>
 14c:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <state>
	
	
	uart_init();
 150:	40 d1       	rcall	.+640    	; 0x3d2 <uart_init>
	stdout = stdin = stderr = &uart_str; //envias un mensaje a la puerta serial
 152:	e8 e5       	ldi	r30, 0x58	; 88
 154:	f3 e0       	ldi	r31, 0x03	; 3
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	92 e0       	ldi	r25, 0x02	; 2
 15a:	95 83       	std	Z+5, r25	; 0x05
 15c:	84 83       	std	Z+4, r24	; 0x04
 15e:	91 83       	std	Z+1, r25	; 0x01
 160:	80 83       	st	Z, r24
 162:	93 83       	std	Z+3, r25	; 0x03
 164:	82 83       	std	Z+2, r24	; 0x02
	fprintf(stdout,"Pulse el boton para encender el led \n\r  Atencion al Led o Sonido..! \n");
 166:	9c 01       	movw	r18, r24
 168:	45 e4       	ldi	r20, 0x45	; 69
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	82 e1       	ldi	r24, 0x12	; 18
 172:	92 e0       	ldi	r25, 0x02	; 2
 174:	ea d2       	rcall	.+1492   	; 0x74a <fwrite>
	//crank up the ISRs
	sei() ;
 176:	78 94       	sei
 178:	08 95       	ret

0000017a <__vector_21>:

}
ISR (TIMER0_COMPA_vect) {
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	8f 93       	push	r24
	if (time1>0) 	--time1;
 186:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <time1>
 18a:	88 23       	and	r24, r24
 18c:	29 f0       	breq	.+10     	; 0x198 <__vector_21+0x1e>
 18e:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <time1>
 192:	81 50       	subi	r24, 0x01	; 1
 194:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <time1>
	if (time2>0)	--time2;  // decrementan los time si son mayores a cero
 198:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <time2>
 19c:	88 23       	and	r24, r24
 19e:	29 f0       	breq	.+10     	; 0x1aa <__vector_21+0x30>
 1a0:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <time2>
 1a4:	81 50       	subi	r24, 0x01	; 1
 1a6:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <time2>
	if (time3>0)	--time3;
 1aa:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <time3>
 1ae:	88 23       	and	r24, r24
 1b0:	29 f0       	breq	.+10     	; 0x1bc <__vector_21+0x42>
 1b2:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <time3>
 1b6:	81 50       	subi	r24, 0x01	; 1
 1b8:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <time3>
}
 1bc:	8f 91       	pop	r24
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <tarea1>:
		}
	}
}

void tarea1(void)
begin
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
time1=1;						//reset the task timer
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <time1>
if (state==2){				//si  el estado es igual a 2 entoces
 1d2:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <state>
 1d6:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <state+0x1>
 1da:	02 97       	sbiw	r24, 0x02	; 2
 1dc:	61 f5       	brne	.+88     	; 0x236 <tarea1+0x6e>
	PORTC |= (1<<3);			//SE enciende el led en el puerto 3 Esto activa el Bit y deja el resto a 0
 1de:	43 9a       	sbi	0x08, 3	; 8
	PORTC |= (1<<0);			//SE enciende el buzeer en el puerto 0
 1e0:	40 9a       	sbi	0x08, 0	; 8
	time++;					//el tiempo se incrementa
 1e2:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <time>
 1e6:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <time+0x1>
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <time+0x1>
 1f0:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <time>
	if(Tiempo_espe<3000){	//se entra al if anidado donde si el tiempo de espera es menor a 3000
 1f4:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <Tiempo_espe>
 1f8:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <Tiempo_espe+0x1>
 1fc:	88 3b       	cpi	r24, 0xB8	; 184
 1fe:	9b 40       	sbci	r25, 0x0B	; 11
 200:	d8 f4       	brcc	.+54     	; 0x238 <tarea1+0x70>
		fprintf(stdout,"Te adelantaste!! \n Pulsa de nuevo.. \n\r");  //se imprime un mensaje de error
 202:	20 91 5a 03 	lds	r18, 0x035A	; 0x80035a <__iob+0x2>
 206:	30 91 5b 03 	lds	r19, 0x035B	; 0x80035b <__iob+0x3>
 20a:	46 e2       	ldi	r20, 0x26	; 38
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	88 e5       	ldi	r24, 0x58	; 88
 214:	92 e0       	ldi	r25, 0x02	; 2
 216:	99 d2       	rcall	.+1330   	; 0x74a <fwrite>
		state=4;				// se pasa al estado 4 dode todo se pone a cero
 218:	84 e0       	ldi	r24, 0x04	; 4
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <state+0x1>
 220:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <state>
	}
}
else{						//en caso de que el estado no sea igual a 2
	PORTC=0x00;				//todos lo pines va a estar en 0
}
if (time>10000){				//si el tiempo  es mayor al tiempo aleatorio que se genero en el la tarea tskdelay
 224:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <time>
 228:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <time+0x1>
 22c:	81 31       	cpi	r24, 0x11	; 17
 22e:	97 42       	sbci	r25, 0x27	; 39
 230:	08 f4       	brcc	.+2      	; 0x234 <tarea1+0x6c>
 232:	4e c0       	rjmp	.+156    	; 0x2d0 <tarea1+0x108>
 234:	09 c0       	rjmp	.+18     	; 0x248 <tarea1+0x80>
		fprintf(stdout,"Te adelantaste!! \n Pulsa de nuevo.. \n\r");  //se imprime un mensaje de error
		state=4;				// se pasa al estado 4 dode todo se pone a cero
	}
}
else{						//en caso de que el estado no sea igual a 2
	PORTC=0x00;				//todos lo pines va a estar en 0
 236:	18 b8       	out	0x08, r1	; 8
}
if (time>10000){				//si el tiempo  es mayor al tiempo aleatorio que se genero en el la tarea tskdelay
 238:	60 91 4f 03 	lds	r22, 0x034F	; 0x80034f <time>
 23c:	70 91 50 03 	lds	r23, 0x0350	; 0x800350 <time+0x1>
 240:	61 31       	cpi	r22, 0x11	; 17
 242:	87 e2       	ldi	r24, 0x27	; 39
 244:	78 07       	cpc	r23, r24
 246:	60 f0       	brcs	.+24     	; 0x260 <tarea1+0x98>
	//genera un mesaje de que el tiempo  supero el limete para pulsar el boton
	fprintf(stdout,"Tiempo limite Excedido..! \n Pulsa de nuevo.. \n\r");
 248:	20 91 5a 03 	lds	r18, 0x035A	; 0x80035a <__iob+0x2>
 24c:	30 91 5b 03 	lds	r19, 0x035B	; 0x80035b <__iob+0x3>
 250:	4f e2       	ldi	r20, 0x2F	; 47
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	8f e7       	ldi	r24, 0x7F	; 127
 25a:	92 e0       	ldi	r25, 0x02	; 2
 25c:	76 d2       	rcall	.+1260   	; 0x74a <fwrite>
 25e:	38 c0       	rjmp	.+112    	; 0x2d0 <tarea1+0x108>
	state=4;					// y pasa al estdo 4  donde todo se pone a 0
}
if (state==3)					// si el estado es igual a 3
 260:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <state>
 264:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <state+0x1>
 268:	03 97       	sbiw	r24, 0x03	; 3
 26a:	61 f5       	brne	.+88     	; 0x2c4 <tarea1+0xfc>
{
	eeprom_write_word((uint16_t*)eeprom_data,time);
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	60 d5       	rcall	.+2752   	; 0xd32 <eeprom_write_word>
	fprintf(stdout,"Su tiempo es en ms: ");	// imrime un mesaje del tiempo que tarda el ususario en pulsar el boton cuando el led esta encendido
 272:	c8 e5       	ldi	r28, 0x58	; 88
 274:	d3 e0       	ldi	r29, 0x03	; 3
 276:	2a 81       	ldd	r18, Y+2	; 0x02
 278:	3b 81       	ldd	r19, Y+3	; 0x03
 27a:	44 e1       	ldi	r20, 0x14	; 20
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	8f ea       	ldi	r24, 0xAF	; 175
 284:	92 e0       	ldi	r25, 0x02	; 2
	fprintf(stdout,"%d \n\r", eeprom_read_word((uint16_t*)eeprom_data)) ;
 286:	61 d2       	rcall	.+1218   	; 0x74a <fwrite>
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	4d d5       	rcall	.+2714   	; 0xd28 <eeprom_read_word>
 28e:	9f 93       	push	r25
 290:	8f 93       	push	r24
 292:	84 ec       	ldi	r24, 0xC4	; 196
 294:	92 e0       	ldi	r25, 0x02	; 2
 296:	9f 93       	push	r25
 298:	8f 93       	push	r24
 29a:	8b 81       	ldd	r24, Y+3	; 0x03
 29c:	8f 93       	push	r24
 29e:	8a 81       	ldd	r24, Y+2	; 0x02
 2a0:	8f 93       	push	r24
 2a2:	44 d2       	rcall	.+1160   	; 0x72c <fprintf>
	fprintf(stdout,"\n Pulse para intentarlo de nuevo.. ! \n ");/// imprime un mensaje para volver a intentar de nuevo medir el tiempo de reaccion
 2a4:	2a 81       	ldd	r18, Y+2	; 0x02
 2a6:	3b 81       	ldd	r19, Y+3	; 0x03
 2a8:	47 e2       	ldi	r20, 0x27	; 39
 2aa:	50 e0       	ldi	r21, 0x00	; 0
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	70 e0       	ldi	r23, 0x00	; 0
 2b0:	8a ec       	ldi	r24, 0xCA	; 202
 2b2:	92 e0       	ldi	r25, 0x02	; 2
 2b4:	4a d2       	rcall	.+1172   	; 0x74a <fwrite>
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	06 c0       	rjmp	.+12     	; 0x2d0 <tarea1+0x108>
	state=4;				// despues de imprimir los mejase se va al estado 4 donde todo se pone  0
}
if (state==4){				//si el estado es igual a 4
 2c4:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <state>
 2c8:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <state+0x1>
 2cc:	04 97       	sbiw	r24, 0x04	; 4
 2ce:	61 f4       	brne	.+24     	; 0x2e8 <tarea1+0x120>
	state=0;					// el estado se resetea y se pone a 0
 2d0:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <state+0x1>
 2d4:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <state>
	Tiempo_espe=0;				// el tiempo de espera se resetea y se pone a 0
 2d8:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <Tiempo_espe+0x1>
 2dc:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <Tiempo_espe>
	time=0;						// y el time se recetea y se pone a 0
 2e0:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <time+0x1>
 2e4:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <time>
}
end
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <tarea2>:

void tarea2(void){
	time2=1;     //reset the task timer
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <time2>
	switch (PushState){
 2f4:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <PushState>
 2f8:	82 30       	cpi	r24, 0x02	; 2
 2fa:	79 f0       	breq	.+30     	; 0x31a <tarea2+0x2c>
 2fc:	18 f4       	brcc	.+6      	; 0x304 <tarea2+0x16>
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	31 f0       	breq	.+12     	; 0x30e <tarea2+0x20>
 302:	08 95       	ret
 304:	83 30       	cpi	r24, 0x03	; 3
 306:	e1 f0       	breq	.+56     	; 0x340 <tarea2+0x52>
 308:	84 30       	cpi	r24, 0x04	; 4
 30a:	01 f1       	breq	.+64     	; 0x34c <tarea2+0x5e>
 30c:	08 95       	ret
		case NoPush:				//1
		if (~PIND & 0x02){
 30e:	49 99       	sbic	0x09, 1	; 9
 310:	26 c0       	rjmp	.+76     	; 0x35e <tarea2+0x70>
			PushState=MaybePush;
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <PushState>
 318:	08 95       	ret
			}else{
			PushState=NoPush ;
		}
		break;
		case MaybePush:			//2
		if (~PIND & 0x02){		//en esta caso PIND vale 00000000 pero al negarlo vale  111111/00000 como esta afirmacion es falsa
 31a:	49 99       	sbic	0x09, 1	; 9
 31c:	0d c0       	rjmp	.+26     	; 0x338 <tarea2+0x4a>
			PushState=Pushed;	// pushState vale 3, es decir se va al etado 3
 31e:	83 e0       	ldi	r24, 0x03	; 3
 320:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <PushState>
			state++;				// estado incrementa
 324:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <state>
 328:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <state+0x1>
 32c:	01 96       	adiw	r24, 0x01	; 1
 32e:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <state+0x1>
 332:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <state>
 336:	08 95       	ret
		}
		else{
			PushState=NoPush;
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <PushState>
 33e:	08 95       	ret
		}
		break;
		case Pushed:				//3
		if (~PIND & 0x02){
 340:	49 9b       	sbis	0x09, 1	; 9
 342:	0d c0       	rjmp	.+26     	; 0x35e <tarea2+0x70>
			PushState=Pushed;
			}else{
			PushState=MaybeNoPush;
 344:	84 e0       	ldi	r24, 0x04	; 4
 346:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <PushState>
 34a:	08 95       	ret
		}
		break;
		case MaybeNoPush:			//4
		if (~PIND & 0x02){
 34c:	49 99       	sbic	0x09, 1	; 9
 34e:	04 c0       	rjmp	.+8      	; 0x358 <tarea2+0x6a>
			PushState=Pushed;
 350:	83 e0       	ldi	r24, 0x03	; 3
 352:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <PushState>
 356:	08 95       	ret
			}else{
			PushState=NoPush;
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <PushState>
 35e:	08 95       	ret

00000360 <tskdelay>:
		break;
	}
}

void tskdelay(void){
	time3=1;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <time3>
	if (state==1){									// si el estado es igual a 1
 366:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <state>
 36a:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <state+0x1>
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f4       	brne	.+60     	; 0x3ae <tskdelay+0x4e>
		nAleat=(9000-5000) + rand ()% 4000;       // se genera valores aleatorios  entre 4 y 8 seg y se entra al segudo if
 372:	ce d1       	rcall	.+924    	; 0x710 <rand>
 374:	60 ea       	ldi	r22, 0xA0	; 160
 376:	7f e0       	ldi	r23, 0x0F	; 15
 378:	5d d1       	rcall	.+698    	; 0x634 <__divmodhi4>
 37a:	80 56       	subi	r24, 0x60	; 96
 37c:	90 4f       	sbci	r25, 0xF0	; 240
 37e:	90 93 52 03 	sts	0x0352, r25	; 0x800352 <nAleat+0x1>
 382:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <nAleat>
		if (Tiempo_espe< nAleat){					// si el tiempo de espera es menor al valor generado aleatoriamente
 386:	20 91 55 03 	lds	r18, 0x0355	; 0x800355 <Tiempo_espe>
 38a:	30 91 56 03 	lds	r19, 0x0356	; 0x800356 <Tiempo_espe+0x1>
 38e:	28 17       	cp	r18, r24
 390:	39 07       	cpc	r19, r25
 392:	38 f4       	brcc	.+14     	; 0x3a2 <tskdelay+0x42>
			Tiempo_espe++;							// el tiempo de espara se incrementa
 394:	2f 5f       	subi	r18, 0xFF	; 255
 396:	3f 4f       	sbci	r19, 0xFF	; 255
 398:	30 93 56 03 	sts	0x0356, r19	; 0x800356 <Tiempo_espe+0x1>
 39c:	20 93 55 03 	sts	0x0355, r18	; 0x800355 <Tiempo_espe>
 3a0:	08 95       	ret
			}else{										// si el tiempo de espera es igual o mayor al valor generado aleatoriamente
			state=2;								// se va al estado que vale 2 de la maquina de estado que esta en la tarea 2
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <state+0x1>
 3aa:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <state>
 3ae:	08 95       	ret

000003b0 <main>:
	if (time1>0) 	--time1;
	if (time2>0)	--time2;  // decrementan los time si son mayores a cero
	if (time3>0)	--time3;
}
int main(void){
	initialize();
 3b0:	b9 de       	rcall	.-654    	; 0x124 <initialize>
	while(1){
		if (time1==0){		//si time1 llega a 0
 3b2:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <time1>
 3b6:	81 11       	cpse	r24, r1
			tarea1();		// se ejecuta la primera tarea
 3b8:	01 c0       	rjmp	.+2      	; 0x3bc <main+0xc>
 3ba:	06 df       	rcall	.-500    	; 0x1c8 <tarea1>
		}
		if (time2==0){		//si time2 llega a 0
 3bc:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <time2>
 3c0:	81 11       	cpse	r24, r1
			tarea2();		//se ejecuta la segunda tarea
 3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <main+0x16>
 3c4:	94 df       	rcall	.-216    	; 0x2ee <tarea2>
		}
		if(time3==0){		////si time3 llega a 0
 3c6:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <time3>
 3ca:	81 11       	cpse	r24, r1
			tskdelay();		//se ejecuta la ultima tarea
 3cc:	f2 cf       	rjmp	.-28     	; 0x3b2 <main+0x2>
 3ce:	c8 df       	rcall	.-112    	; 0x360 <tskdelay>
 3d0:	f0 cf       	rjmp	.-32     	; 0x3b2 <main+0x2>

000003d2 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
 3d2:	87 e6       	ldi	r24, 0x67	; 103
 3d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
 3d8:	88 e1       	ldi	r24, 0x18	; 24
 3da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 3de:	08 95       	ret

000003e0 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 3e0:	cf 93       	push	r28
 3e2:	c8 2f       	mov	r28, r24

  if (c == '\a')
 3e4:	87 30       	cpi	r24, 0x07	; 7
 3e6:	61 f4       	brne	.+24     	; 0x400 <__LOCK_REGION_LENGTH__>
    {
      fputs("*ring*\n", stderr);
 3e8:	20 91 5c 03 	lds	r18, 0x035C	; 0x80035c <__iob+0x4>
 3ec:	30 91 5d 03 	lds	r19, 0x035D	; 0x80035d <__iob+0x5>
 3f0:	47 e0       	ldi	r20, 0x07	; 7
 3f2:	50 e0       	ldi	r21, 0x00	; 0
 3f4:	61 e0       	ldi	r22, 0x01	; 1
 3f6:	70 e0       	ldi	r23, 0x00	; 0
 3f8:	82 ef       	ldi	r24, 0xF2	; 242
 3fa:	92 e0       	ldi	r25, 0x02	; 2
 3fc:	a6 d1       	rcall	.+844    	; 0x74a <fwrite>
      return 0;
 3fe:	0b c0       	rjmp	.+22     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
    }

  if (c == '\n')
 400:	8a 30       	cpi	r24, 0x0A	; 10
 402:	11 f4       	brne	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
    uart_putchar('\r', stream);
 404:	8d e0       	ldi	r24, 0x0D	; 13
 406:	ec df       	rcall	.-40     	; 0x3e0 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 408:	e0 ec       	ldi	r30, 0xC0	; 192
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	85 ff       	sbrs	r24, 5
 410:	fd cf       	rjmp	.-6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
  UDR0 = c;
 412:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

  return 0;
}
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	cf 91       	pop	r28
 41c:	08 95       	ret

0000041e <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 41e:	6f 92       	push	r6
 420:	7f 92       	push	r7
 422:	8f 92       	push	r8
 424:	9f 92       	push	r9
 426:	af 92       	push	r10
 428:	bf 92       	push	r11
 42a:	cf 92       	push	r12
 42c:	df 92       	push	r13
 42e:	ef 92       	push	r14
 430:	ff 92       	push	r15
 432:	0f 93       	push	r16
 434:	1f 93       	push	r17
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 43a:	20 91 4a 03 	lds	r18, 0x034A	; 0x80034a <rxp.1827>
 43e:	30 91 4b 03 	lds	r19, 0x034B	; 0x80034b <rxp.1827+0x1>
 442:	23 2b       	or	r18, r19
 444:	09 f0       	breq	.+2      	; 0x448 <uart_getchar+0x2a>
 446:	cc c0       	rjmp	.+408    	; 0x5e0 <uart_getchar+0x1c2>
 448:	8c 01       	movw	r16, r24
 44a:	0f 2e       	mov	r0, r31
 44c:	fa ef       	ldi	r31, 0xFA	; 250
 44e:	8f 2e       	mov	r8, r31
 450:	f2 e0       	ldi	r31, 0x02	; 2
 452:	9f 2e       	mov	r9, r31
 454:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 456:	c0 ec       	ldi	r28, 0xC0	; 192
 458:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
 45a:	0f 2e       	mov	r0, r31
 45c:	f6 ec       	ldi	r31, 0xC6	; 198
 45e:	cf 2e       	mov	r12, r31
 460:	d1 2c       	mov	r13, r1
 462:	f0 2d       	mov	r31, r0
 464:	54 01       	movw	r10, r8
 466:	0f 2e       	mov	r0, r31
 468:	f9 ef       	ldi	r31, 0xF9	; 249
 46a:	6f 2e       	mov	r6, r31
 46c:	f2 e0       	ldi	r31, 0x02	; 2
 46e:	7f 2e       	mov	r7, r31
 470:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 472:	88 81       	ld	r24, Y
 474:	88 23       	and	r24, r24
 476:	ec f7       	brge	.-6      	; 0x472 <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
 478:	88 81       	ld	r24, Y
 47a:	84 fd       	sbrc	r24, 4
 47c:	c4 c0       	rjmp	.+392    	; 0x606 <uart_getchar+0x1e8>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 47e:	88 81       	ld	r24, Y
 480:	83 fd       	sbrc	r24, 3
 482:	c4 c0       	rjmp	.+392    	; 0x60c <uart_getchar+0x1ee>
	  return _FDEV_ERR;
	c = UDR0;
 484:	f6 01       	movw	r30, r12
 486:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 488:	8d 30       	cpi	r24, 0x0D	; 13
 48a:	11 f0       	breq	.+4      	; 0x490 <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
 48c:	8a 30       	cpi	r24, 0x0A	; 10
 48e:	61 f4       	brne	.+24     	; 0x4a8 <uart_getchar+0x8a>
	  {
	    *cp = c;
 490:	8a e0       	ldi	r24, 0x0A	; 10
 492:	f4 01       	movw	r30, r8
 494:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
 496:	b8 01       	movw	r22, r16
 498:	a3 df       	rcall	.-186    	; 0x3e0 <uart_putchar>
	    rxp = b;
 49a:	8a ef       	ldi	r24, 0xFA	; 250
 49c:	92 e0       	ldi	r25, 0x02	; 2
 49e:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <rxp.1827+0x1>
 4a2:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <rxp.1827>
	    break;
 4a6:	9c c0       	rjmp	.+312    	; 0x5e0 <uart_getchar+0x1c2>
	  }
	else if (c == '\t')
 4a8:	89 30       	cpi	r24, 0x09	; 9
 4aa:	39 f0       	breq	.+14     	; 0x4ba <uart_getchar+0x9c>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 4ac:	90 ee       	ldi	r25, 0xE0	; 224
 4ae:	98 0f       	add	r25, r24
 4b0:	9f 35       	cpi	r25, 0x5F	; 95
 4b2:	20 f0       	brcs	.+8      	; 0x4bc <uart_getchar+0x9e>
 4b4:	80 3a       	cpi	r24, 0xA0	; 160
 4b6:	a8 f0       	brcs	.+42     	; 0x4e2 <uart_getchar+0xc4>
 4b8:	01 c0       	rjmp	.+2      	; 0x4bc <uart_getchar+0x9e>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
 4ba:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 4bc:	f9 e4       	ldi	r31, 0x49	; 73
 4be:	8f 16       	cp	r8, r31
 4c0:	f3 e0       	ldi	r31, 0x03	; 3
 4c2:	9f 06       	cpc	r9, r31
 4c4:	21 f4       	brne	.+8      	; 0x4ce <uart_getchar+0xb0>
	      uart_putchar('\a', stream);
 4c6:	b8 01       	movw	r22, r16
 4c8:	87 e0       	ldi	r24, 0x07	; 7
 4ca:	8a df       	rcall	.-236    	; 0x3e0 <uart_putchar>
 4cc:	d2 cf       	rjmp	.-92     	; 0x472 <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
 4ce:	74 01       	movw	r14, r8
 4d0:	9f ef       	ldi	r25, 0xFF	; 255
 4d2:	e9 1a       	sub	r14, r25
 4d4:	f9 0a       	sbc	r15, r25
 4d6:	f4 01       	movw	r30, r8
		uart_putchar(c, stream);
 4d8:	80 83       	st	Z, r24
 4da:	b8 01       	movw	r22, r16
 4dc:	81 df       	rcall	.-254    	; 0x3e0 <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 4de:	47 01       	movw	r8, r14
 4e0:	c8 cf       	rjmp	.-112    	; 0x472 <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
 4e2:	82 31       	cpi	r24, 0x12	; 18
 4e4:	b9 f1       	breq	.+110    	; 0x554 <uart_getchar+0x136>
 4e6:	30 f4       	brcc	.+12     	; 0x4f4 <uart_getchar+0xd6>
 4e8:	83 30       	cpi	r24, 0x03	; 3
 4ea:	09 f4       	brne	.+2      	; 0x4ee <uart_getchar+0xd0>
 4ec:	92 c0       	rjmp	.+292    	; 0x612 <uart_getchar+0x1f4>
 4ee:	88 30       	cpi	r24, 0x08	; 8
 4f0:	e9 f0       	breq	.+58     	; 0x52c <uart_getchar+0x10e>
 4f2:	bf cf       	rjmp	.-130    	; 0x472 <uart_getchar+0x54>
 4f4:	87 31       	cpi	r24, 0x17	; 23
 4f6:	29 f0       	breq	.+10     	; 0x502 <uart_getchar+0xe4>
 4f8:	8f 37       	cpi	r24, 0x7F	; 127
 4fa:	c1 f0       	breq	.+48     	; 0x52c <uart_getchar+0x10e>
 4fc:	85 31       	cpi	r24, 0x15	; 21
 4fe:	79 f0       	breq	.+30     	; 0x51e <uart_getchar+0x100>
 500:	b8 cf       	rjmp	.-144    	; 0x472 <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 502:	fa ef       	ldi	r31, 0xFA	; 250
 504:	8f 16       	cp	r8, r31
 506:	f2 e0       	ldi	r31, 0x02	; 2
 508:	9f 06       	cpc	r9, r31
 50a:	09 f0       	breq	.+2      	; 0x50e <uart_getchar+0xf0>
 50c:	08 f4       	brcc	.+2      	; 0x510 <uart_getchar+0xf2>
 50e:	b1 cf       	rjmp	.-158    	; 0x472 <uart_getchar+0x54>
 510:	f4 01       	movw	r30, r8
 512:	31 97       	sbiw	r30, 0x01	; 1
 514:	80 81       	ld	r24, Z
 516:	80 32       	cpi	r24, 0x20	; 32
 518:	09 f0       	breq	.+2      	; 0x51c <uart_getchar+0xfe>
 51a:	4a c0       	rjmp	.+148    	; 0x5b0 <uart_getchar+0x192>
 51c:	aa cf       	rjmp	.-172    	; 0x472 <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 51e:	8a ef       	ldi	r24, 0xFA	; 250
 520:	88 16       	cp	r8, r24
 522:	82 e0       	ldi	r24, 0x02	; 2
 524:	98 06       	cpc	r9, r24
 526:	09 f0       	breq	.+2      	; 0x52a <uart_getchar+0x10c>
 528:	70 f5       	brcc	.+92     	; 0x586 <uart_getchar+0x168>
 52a:	a3 cf       	rjmp	.-186    	; 0x472 <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 52c:	9a ef       	ldi	r25, 0xFA	; 250
 52e:	89 16       	cp	r8, r25
 530:	92 e0       	ldi	r25, 0x02	; 2
 532:	99 06       	cpc	r9, r25
 534:	09 f0       	breq	.+2      	; 0x538 <uart_getchar+0x11a>
 536:	08 f4       	brcc	.+2      	; 0x53a <uart_getchar+0x11c>
	      {
		uart_putchar('\b', stream);
 538:	9c cf       	rjmp	.-200    	; 0x472 <uart_getchar+0x54>
 53a:	b8 01       	movw	r22, r16
 53c:	88 e0       	ldi	r24, 0x08	; 8
		uart_putchar(' ', stream);
 53e:	50 df       	rcall	.-352    	; 0x3e0 <uart_putchar>
 540:	b8 01       	movw	r22, r16
 542:	80 e2       	ldi	r24, 0x20	; 32
		uart_putchar('\b', stream);
 544:	4d df       	rcall	.-358    	; 0x3e0 <uart_putchar>
 546:	b8 01       	movw	r22, r16
 548:	88 e0       	ldi	r24, 0x08	; 8
 54a:	4a df       	rcall	.-364    	; 0x3e0 <uart_putchar>
		cp--;
 54c:	e1 e0       	ldi	r30, 0x01	; 1
 54e:	8e 1a       	sub	r8, r30
 550:	91 08       	sbc	r9, r1
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 552:	8f cf       	rjmp	.-226    	; 0x472 <uart_getchar+0x54>
 554:	b8 01       	movw	r22, r16
 556:	8d e0       	ldi	r24, 0x0D	; 13
 558:	43 df       	rcall	.-378    	; 0x3e0 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 55a:	fa ef       	ldi	r31, 0xFA	; 250
 55c:	8f 16       	cp	r8, r31
 55e:	f2 e0       	ldi	r31, 0x02	; 2
 560:	9f 06       	cpc	r9, r31
 562:	09 f0       	breq	.+2      	; 0x566 <uart_getchar+0x148>
 564:	08 f4       	brcc	.+2      	; 0x568 <uart_getchar+0x14a>
 566:	85 cf       	rjmp	.-246    	; 0x472 <uart_getchar+0x54>
 568:	0f 2e       	mov	r0, r31
 56a:	fa ef       	ldi	r31, 0xFA	; 250
 56c:	ef 2e       	mov	r14, r31
 56e:	f2 e0       	ldi	r31, 0x02	; 2
 570:	ff 2e       	mov	r15, r31
	      uart_putchar(*cp2, stream);
 572:	f0 2d       	mov	r31, r0
 574:	b8 01       	movw	r22, r16
 576:	f7 01       	movw	r30, r14
 578:	81 91       	ld	r24, Z+
 57a:	7f 01       	movw	r14, r30
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 57c:	31 df       	rcall	.-414    	; 0x3e0 <uart_putchar>
 57e:	8e 14       	cp	r8, r14
 580:	9f 04       	cpc	r9, r15
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 582:	c1 f7       	brne	.-16     	; 0x574 <uart_getchar+0x156>
 584:	76 cf       	rjmp	.-276    	; 0x472 <uart_getchar+0x54>
 586:	b8 01       	movw	r22, r16
		uart_putchar(' ', stream);
 588:	88 e0       	ldi	r24, 0x08	; 8
 58a:	2a df       	rcall	.-428    	; 0x3e0 <uart_putchar>
 58c:	b8 01       	movw	r22, r16
 58e:	80 e2       	ldi	r24, 0x20	; 32
		uart_putchar('\b', stream);
 590:	27 df       	rcall	.-434    	; 0x3e0 <uart_putchar>
 592:	b8 01       	movw	r22, r16
 594:	88 e0       	ldi	r24, 0x08	; 8
 596:	24 df       	rcall	.-440    	; 0x3e0 <uart_putchar>
		cp--;
 598:	f1 e0       	ldi	r31, 0x01	; 1
 59a:	8f 1a       	sub	r8, r31
 59c:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 59e:	8a ef       	ldi	r24, 0xFA	; 250
 5a0:	88 16       	cp	r8, r24
 5a2:	82 e0       	ldi	r24, 0x02	; 2
 5a4:	98 06       	cpc	r9, r24
 5a6:	79 f7       	brne	.-34     	; 0x586 <uart_getchar+0x168>
 5a8:	f3 01       	movw	r30, r6
 5aa:	31 96       	adiw	r30, 0x01	; 1
 5ac:	4f 01       	movw	r8, r30
 5ae:	61 cf       	rjmp	.-318    	; 0x472 <uart_getchar+0x54>
 5b0:	74 01       	movw	r14, r8
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 5b2:	f1 e0       	ldi	r31, 0x01	; 1
 5b4:	ef 1a       	sub	r14, r31
 5b6:	f1 08       	sbc	r15, r1
 5b8:	b8 01       	movw	r22, r16
		uart_putchar(' ', stream);
 5ba:	88 e0       	ldi	r24, 0x08	; 8
 5bc:	11 df       	rcall	.-478    	; 0x3e0 <uart_putchar>
 5be:	b8 01       	movw	r22, r16
 5c0:	80 e2       	ldi	r24, 0x20	; 32
		uart_putchar('\b', stream);
 5c2:	0e df       	rcall	.-484    	; 0x3e0 <uart_putchar>
 5c4:	b8 01       	movw	r22, r16
 5c6:	88 e0       	ldi	r24, 0x08	; 8
 5c8:	0b df       	rcall	.-490    	; 0x3e0 <uart_putchar>
		cp--;
 5ca:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 5cc:	ea 14       	cp	r14, r10
 5ce:	fb 04       	cpc	r15, r11
 5d0:	09 f4       	brne	.+2      	; 0x5d4 <uart_getchar+0x1b6>
 5d2:	4f cf       	rjmp	.-354    	; 0x472 <uart_getchar+0x54>
 5d4:	f7 01       	movw	r30, r14
 5d6:	82 91       	ld	r24, -Z
 5d8:	7f 01       	movw	r14, r30
 5da:	80 32       	cpi	r24, 0x20	; 32
 5dc:	69 f7       	brne	.-38     	; 0x5b8 <uart_getchar+0x19a>
 5de:	49 cf       	rjmp	.-366    	; 0x472 <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
 5e0:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <rxp.1827>
 5e4:	f0 91 4b 03 	lds	r31, 0x034B	; 0x80034b <rxp.1827+0x1>
 5e8:	cf 01       	movw	r24, r30
 5ea:	01 96       	adiw	r24, 0x01	; 1
 5ec:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <rxp.1827+0x1>
 5f0:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <rxp.1827>
 5f4:	80 81       	ld	r24, Z
  if (c == '\n')
 5f6:	8a 30       	cpi	r24, 0x0A	; 10
 5f8:	21 f4       	brne	.+8      	; 0x602 <uart_getchar+0x1e4>
    rxp = 0;
 5fa:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <rxp.1827+0x1>
 5fe:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <rxp.1827>

  return c;
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	08 c0       	rjmp	.+16     	; 0x616 <uart_getchar+0x1f8>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 606:	8e ef       	ldi	r24, 0xFE	; 254
 608:	9f ef       	ldi	r25, 0xFF	; 255
 60a:	05 c0       	rjmp	.+10     	; 0x616 <uart_getchar+0x1f8>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 60c:	8f ef       	ldi	r24, 0xFF	; 255
 60e:	9f ef       	ldi	r25, 0xFF	; 255
 610:	02 c0       	rjmp	.+4      	; 0x616 <uart_getchar+0x1f8>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 612:	8f ef       	ldi	r24, 0xFF	; 255
 614:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
 61a:	1f 91       	pop	r17
 61c:	0f 91       	pop	r16
 61e:	ff 90       	pop	r15
 620:	ef 90       	pop	r14
 622:	df 90       	pop	r13
 624:	cf 90       	pop	r12
 626:	bf 90       	pop	r11
 628:	af 90       	pop	r10
 62a:	9f 90       	pop	r9
 62c:	8f 90       	pop	r8
 62e:	7f 90       	pop	r7
 630:	6f 90       	pop	r6
 632:	08 95       	ret

00000634 <__divmodhi4>:
 634:	97 fb       	bst	r25, 7
 636:	07 2e       	mov	r0, r23
 638:	16 f4       	brtc	.+4      	; 0x63e <__divmodhi4+0xa>
 63a:	00 94       	com	r0
 63c:	06 d0       	rcall	.+12     	; 0x64a <__divmodhi4_neg1>
 63e:	77 fd       	sbrc	r23, 7
 640:	08 d0       	rcall	.+16     	; 0x652 <__divmodhi4_neg2>
 642:	0b d0       	rcall	.+22     	; 0x65a <__udivmodhi4>
 644:	07 fc       	sbrc	r0, 7
 646:	05 d0       	rcall	.+10     	; 0x652 <__divmodhi4_neg2>
 648:	3e f4       	brtc	.+14     	; 0x658 <__divmodhi4_exit>

0000064a <__divmodhi4_neg1>:
 64a:	90 95       	com	r25
 64c:	81 95       	neg	r24
 64e:	9f 4f       	sbci	r25, 0xFF	; 255
 650:	08 95       	ret

00000652 <__divmodhi4_neg2>:
 652:	70 95       	com	r23
 654:	61 95       	neg	r22
 656:	7f 4f       	sbci	r23, 0xFF	; 255

00000658 <__divmodhi4_exit>:
 658:	08 95       	ret

0000065a <__udivmodhi4>:
 65a:	aa 1b       	sub	r26, r26
 65c:	bb 1b       	sub	r27, r27
 65e:	51 e1       	ldi	r21, 0x11	; 17
 660:	07 c0       	rjmp	.+14     	; 0x670 <__udivmodhi4_ep>

00000662 <__udivmodhi4_loop>:
 662:	aa 1f       	adc	r26, r26
 664:	bb 1f       	adc	r27, r27
 666:	a6 17       	cp	r26, r22
 668:	b7 07       	cpc	r27, r23
 66a:	10 f0       	brcs	.+4      	; 0x670 <__udivmodhi4_ep>
 66c:	a6 1b       	sub	r26, r22
 66e:	b7 0b       	sbc	r27, r23

00000670 <__udivmodhi4_ep>:
 670:	88 1f       	adc	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	5a 95       	dec	r21
 676:	a9 f7       	brne	.-22     	; 0x662 <__udivmodhi4_loop>
 678:	80 95       	com	r24
 67a:	90 95       	com	r25
 67c:	bc 01       	movw	r22, r24
 67e:	cd 01       	movw	r24, r26
 680:	08 95       	ret

00000682 <do_rand>:
 682:	8f 92       	push	r8
 684:	9f 92       	push	r9
 686:	af 92       	push	r10
 688:	bf 92       	push	r11
 68a:	cf 92       	push	r12
 68c:	df 92       	push	r13
 68e:	ef 92       	push	r14
 690:	ff 92       	push	r15
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
 696:	ec 01       	movw	r28, r24
 698:	68 81       	ld	r22, Y
 69a:	79 81       	ldd	r23, Y+1	; 0x01
 69c:	8a 81       	ldd	r24, Y+2	; 0x02
 69e:	9b 81       	ldd	r25, Y+3	; 0x03
 6a0:	61 15       	cp	r22, r1
 6a2:	71 05       	cpc	r23, r1
 6a4:	81 05       	cpc	r24, r1
 6a6:	91 05       	cpc	r25, r1
 6a8:	21 f4       	brne	.+8      	; 0x6b2 <do_rand+0x30>
 6aa:	64 e2       	ldi	r22, 0x24	; 36
 6ac:	79 ed       	ldi	r23, 0xD9	; 217
 6ae:	8b e5       	ldi	r24, 0x5B	; 91
 6b0:	97 e0       	ldi	r25, 0x07	; 7
 6b2:	2d e1       	ldi	r18, 0x1D	; 29
 6b4:	33 ef       	ldi	r19, 0xF3	; 243
 6b6:	41 e0       	ldi	r20, 0x01	; 1
 6b8:	50 e0       	ldi	r21, 0x00	; 0
 6ba:	5c d3       	rcall	.+1720   	; 0xd74 <__divmodsi4>
 6bc:	49 01       	movw	r8, r18
 6be:	5a 01       	movw	r10, r20
 6c0:	9b 01       	movw	r18, r22
 6c2:	ac 01       	movw	r20, r24
 6c4:	a7 ea       	ldi	r26, 0xA7	; 167
 6c6:	b1 e4       	ldi	r27, 0x41	; 65
 6c8:	71 d3       	rcall	.+1762   	; 0xdac <__muluhisi3>
 6ca:	6b 01       	movw	r12, r22
 6cc:	7c 01       	movw	r14, r24
 6ce:	ac ee       	ldi	r26, 0xEC	; 236
 6d0:	b4 ef       	ldi	r27, 0xF4	; 244
 6d2:	a5 01       	movw	r20, r10
 6d4:	94 01       	movw	r18, r8
 6d6:	76 d3       	rcall	.+1772   	; 0xdc4 <__mulohisi3>
 6d8:	dc 01       	movw	r26, r24
 6da:	cb 01       	movw	r24, r22
 6dc:	8c 0d       	add	r24, r12
 6de:	9d 1d       	adc	r25, r13
 6e0:	ae 1d       	adc	r26, r14
 6e2:	bf 1d       	adc	r27, r15
 6e4:	b7 ff       	sbrs	r27, 7
 6e6:	03 c0       	rjmp	.+6      	; 0x6ee <do_rand+0x6c>
 6e8:	01 97       	sbiw	r24, 0x01	; 1
 6ea:	a1 09       	sbc	r26, r1
 6ec:	b0 48       	sbci	r27, 0x80	; 128
 6ee:	88 83       	st	Y, r24
 6f0:	99 83       	std	Y+1, r25	; 0x01
 6f2:	aa 83       	std	Y+2, r26	; 0x02
 6f4:	bb 83       	std	Y+3, r27	; 0x03
 6f6:	9f 77       	andi	r25, 0x7F	; 127
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	ff 90       	pop	r15
 6fe:	ef 90       	pop	r14
 700:	df 90       	pop	r13
 702:	cf 90       	pop	r12
 704:	bf 90       	pop	r11
 706:	af 90       	pop	r10
 708:	9f 90       	pop	r9
 70a:	8f 90       	pop	r8
 70c:	08 95       	ret

0000070e <rand_r>:
 70e:	b9 cf       	rjmp	.-142    	; 0x682 <do_rand>

00000710 <rand>:
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	92 e0       	ldi	r25, 0x02	; 2
 714:	b6 cf       	rjmp	.-148    	; 0x682 <do_rand>

00000716 <srand>:
 716:	a0 e0       	ldi	r26, 0x00	; 0
 718:	b0 e0       	ldi	r27, 0x00	; 0
 71a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 71e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
 722:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
 726:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
 72a:	08 95       	ret

0000072c <fprintf>:
 72c:	cf 93       	push	r28
 72e:	df 93       	push	r29
 730:	cd b7       	in	r28, 0x3d	; 61
 732:	de b7       	in	r29, 0x3e	; 62
 734:	ae 01       	movw	r20, r28
 736:	46 5f       	subi	r20, 0xF6	; 246
 738:	5f 4f       	sbci	r21, 0xFF	; 255
 73a:	68 85       	ldd	r22, Y+8	; 0x08
 73c:	79 85       	ldd	r23, Y+9	; 0x09
 73e:	8e 81       	ldd	r24, Y+6	; 0x06
 740:	9f 81       	ldd	r25, Y+7	; 0x07
 742:	45 d0       	rcall	.+138    	; 0x7ce <vfprintf>
 744:	df 91       	pop	r29
 746:	cf 91       	pop	r28
 748:	08 95       	ret

0000074a <fwrite>:
 74a:	8f 92       	push	r8
 74c:	9f 92       	push	r9
 74e:	af 92       	push	r10
 750:	bf 92       	push	r11
 752:	cf 92       	push	r12
 754:	df 92       	push	r13
 756:	ef 92       	push	r14
 758:	ff 92       	push	r15
 75a:	0f 93       	push	r16
 75c:	1f 93       	push	r17
 75e:	cf 93       	push	r28
 760:	df 93       	push	r29
 762:	5b 01       	movw	r10, r22
 764:	4a 01       	movw	r8, r20
 766:	79 01       	movw	r14, r18
 768:	d9 01       	movw	r26, r18
 76a:	13 96       	adiw	r26, 0x03	; 3
 76c:	2c 91       	ld	r18, X
 76e:	21 ff       	sbrs	r18, 1
 770:	1d c0       	rjmp	.+58     	; 0x7ac <fwrite+0x62>
 772:	c0 e0       	ldi	r28, 0x00	; 0
 774:	d0 e0       	ldi	r29, 0x00	; 0
 776:	c8 15       	cp	r28, r8
 778:	d9 05       	cpc	r29, r9
 77a:	d9 f0       	breq	.+54     	; 0x7b2 <fwrite+0x68>
 77c:	8c 01       	movw	r16, r24
 77e:	6c 01       	movw	r12, r24
 780:	ca 0c       	add	r12, r10
 782:	db 1c       	adc	r13, r11
 784:	c8 01       	movw	r24, r16
 786:	0c 15       	cp	r16, r12
 788:	1d 05       	cpc	r17, r13
 78a:	71 f0       	breq	.+28     	; 0x7a8 <fwrite+0x5e>
 78c:	0f 5f       	subi	r16, 0xFF	; 255
 78e:	1f 4f       	sbci	r17, 0xFF	; 255
 790:	d7 01       	movw	r26, r14
 792:	18 96       	adiw	r26, 0x08	; 8
 794:	ed 91       	ld	r30, X+
 796:	fc 91       	ld	r31, X
 798:	19 97       	sbiw	r26, 0x09	; 9
 79a:	b7 01       	movw	r22, r14
 79c:	dc 01       	movw	r26, r24
 79e:	8c 91       	ld	r24, X
 7a0:	19 95       	eicall
 7a2:	89 2b       	or	r24, r25
 7a4:	79 f3       	breq	.-34     	; 0x784 <fwrite+0x3a>
 7a6:	05 c0       	rjmp	.+10     	; 0x7b2 <fwrite+0x68>
 7a8:	21 96       	adiw	r28, 0x01	; 1
 7aa:	e5 cf       	rjmp	.-54     	; 0x776 <fwrite+0x2c>
 7ac:	80 e0       	ldi	r24, 0x00	; 0
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	01 c0       	rjmp	.+2      	; 0x7b4 <fwrite+0x6a>
 7b2:	ce 01       	movw	r24, r28
 7b4:	df 91       	pop	r29
 7b6:	cf 91       	pop	r28
 7b8:	1f 91       	pop	r17
 7ba:	0f 91       	pop	r16
 7bc:	ff 90       	pop	r15
 7be:	ef 90       	pop	r14
 7c0:	df 90       	pop	r13
 7c2:	cf 90       	pop	r12
 7c4:	bf 90       	pop	r11
 7c6:	af 90       	pop	r10
 7c8:	9f 90       	pop	r9
 7ca:	8f 90       	pop	r8
 7cc:	08 95       	ret

000007ce <vfprintf>:
 7ce:	2f 92       	push	r2
 7d0:	3f 92       	push	r3
 7d2:	4f 92       	push	r4
 7d4:	5f 92       	push	r5
 7d6:	6f 92       	push	r6
 7d8:	7f 92       	push	r7
 7da:	8f 92       	push	r8
 7dc:	9f 92       	push	r9
 7de:	af 92       	push	r10
 7e0:	bf 92       	push	r11
 7e2:	cf 92       	push	r12
 7e4:	df 92       	push	r13
 7e6:	ef 92       	push	r14
 7e8:	ff 92       	push	r15
 7ea:	0f 93       	push	r16
 7ec:	1f 93       	push	r17
 7ee:	cf 93       	push	r28
 7f0:	df 93       	push	r29
 7f2:	cd b7       	in	r28, 0x3d	; 61
 7f4:	de b7       	in	r29, 0x3e	; 62
 7f6:	2b 97       	sbiw	r28, 0x0b	; 11
 7f8:	0f b6       	in	r0, 0x3f	; 63
 7fa:	f8 94       	cli
 7fc:	de bf       	out	0x3e, r29	; 62
 7fe:	0f be       	out	0x3f, r0	; 63
 800:	cd bf       	out	0x3d, r28	; 61
 802:	6c 01       	movw	r12, r24
 804:	7b 01       	movw	r14, r22
 806:	8a 01       	movw	r16, r20
 808:	fc 01       	movw	r30, r24
 80a:	17 82       	std	Z+7, r1	; 0x07
 80c:	16 82       	std	Z+6, r1	; 0x06
 80e:	83 81       	ldd	r24, Z+3	; 0x03
 810:	81 ff       	sbrs	r24, 1
 812:	bf c1       	rjmp	.+894    	; 0xb92 <vfprintf+0x3c4>
 814:	ce 01       	movw	r24, r28
 816:	01 96       	adiw	r24, 0x01	; 1
 818:	3c 01       	movw	r6, r24
 81a:	f6 01       	movw	r30, r12
 81c:	93 81       	ldd	r25, Z+3	; 0x03
 81e:	f7 01       	movw	r30, r14
 820:	93 fd       	sbrc	r25, 3
 822:	85 91       	lpm	r24, Z+
 824:	93 ff       	sbrs	r25, 3
 826:	81 91       	ld	r24, Z+
 828:	7f 01       	movw	r14, r30
 82a:	88 23       	and	r24, r24
 82c:	09 f4       	brne	.+2      	; 0x830 <vfprintf+0x62>
 82e:	ad c1       	rjmp	.+858    	; 0xb8a <vfprintf+0x3bc>
 830:	85 32       	cpi	r24, 0x25	; 37
 832:	39 f4       	brne	.+14     	; 0x842 <vfprintf+0x74>
 834:	93 fd       	sbrc	r25, 3
 836:	85 91       	lpm	r24, Z+
 838:	93 ff       	sbrs	r25, 3
 83a:	81 91       	ld	r24, Z+
 83c:	7f 01       	movw	r14, r30
 83e:	85 32       	cpi	r24, 0x25	; 37
 840:	21 f4       	brne	.+8      	; 0x84a <vfprintf+0x7c>
 842:	b6 01       	movw	r22, r12
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	d6 d1       	rcall	.+940    	; 0xbf4 <fputc>
 848:	e8 cf       	rjmp	.-48     	; 0x81a <vfprintf+0x4c>
 84a:	91 2c       	mov	r9, r1
 84c:	21 2c       	mov	r2, r1
 84e:	31 2c       	mov	r3, r1
 850:	ff e1       	ldi	r31, 0x1F	; 31
 852:	f3 15       	cp	r31, r3
 854:	d8 f0       	brcs	.+54     	; 0x88c <vfprintf+0xbe>
 856:	8b 32       	cpi	r24, 0x2B	; 43
 858:	79 f0       	breq	.+30     	; 0x878 <vfprintf+0xaa>
 85a:	38 f4       	brcc	.+14     	; 0x86a <vfprintf+0x9c>
 85c:	80 32       	cpi	r24, 0x20	; 32
 85e:	79 f0       	breq	.+30     	; 0x87e <vfprintf+0xb0>
 860:	83 32       	cpi	r24, 0x23	; 35
 862:	a1 f4       	brne	.+40     	; 0x88c <vfprintf+0xbe>
 864:	23 2d       	mov	r18, r3
 866:	20 61       	ori	r18, 0x10	; 16
 868:	1d c0       	rjmp	.+58     	; 0x8a4 <vfprintf+0xd6>
 86a:	8d 32       	cpi	r24, 0x2D	; 45
 86c:	61 f0       	breq	.+24     	; 0x886 <vfprintf+0xb8>
 86e:	80 33       	cpi	r24, 0x30	; 48
 870:	69 f4       	brne	.+26     	; 0x88c <vfprintf+0xbe>
 872:	23 2d       	mov	r18, r3
 874:	21 60       	ori	r18, 0x01	; 1
 876:	16 c0       	rjmp	.+44     	; 0x8a4 <vfprintf+0xd6>
 878:	83 2d       	mov	r24, r3
 87a:	82 60       	ori	r24, 0x02	; 2
 87c:	38 2e       	mov	r3, r24
 87e:	e3 2d       	mov	r30, r3
 880:	e4 60       	ori	r30, 0x04	; 4
 882:	3e 2e       	mov	r3, r30
 884:	2a c0       	rjmp	.+84     	; 0x8da <vfprintf+0x10c>
 886:	f3 2d       	mov	r31, r3
 888:	f8 60       	ori	r31, 0x08	; 8
 88a:	1d c0       	rjmp	.+58     	; 0x8c6 <vfprintf+0xf8>
 88c:	37 fc       	sbrc	r3, 7
 88e:	2d c0       	rjmp	.+90     	; 0x8ea <vfprintf+0x11c>
 890:	20 ed       	ldi	r18, 0xD0	; 208
 892:	28 0f       	add	r18, r24
 894:	2a 30       	cpi	r18, 0x0A	; 10
 896:	40 f0       	brcs	.+16     	; 0x8a8 <vfprintf+0xda>
 898:	8e 32       	cpi	r24, 0x2E	; 46
 89a:	b9 f4       	brne	.+46     	; 0x8ca <vfprintf+0xfc>
 89c:	36 fc       	sbrc	r3, 6
 89e:	75 c1       	rjmp	.+746    	; 0xb8a <vfprintf+0x3bc>
 8a0:	23 2d       	mov	r18, r3
 8a2:	20 64       	ori	r18, 0x40	; 64
 8a4:	32 2e       	mov	r3, r18
 8a6:	19 c0       	rjmp	.+50     	; 0x8da <vfprintf+0x10c>
 8a8:	36 fe       	sbrs	r3, 6
 8aa:	06 c0       	rjmp	.+12     	; 0x8b8 <vfprintf+0xea>
 8ac:	8a e0       	ldi	r24, 0x0A	; 10
 8ae:	98 9e       	mul	r9, r24
 8b0:	20 0d       	add	r18, r0
 8b2:	11 24       	eor	r1, r1
 8b4:	92 2e       	mov	r9, r18
 8b6:	11 c0       	rjmp	.+34     	; 0x8da <vfprintf+0x10c>
 8b8:	ea e0       	ldi	r30, 0x0A	; 10
 8ba:	2e 9e       	mul	r2, r30
 8bc:	20 0d       	add	r18, r0
 8be:	11 24       	eor	r1, r1
 8c0:	22 2e       	mov	r2, r18
 8c2:	f3 2d       	mov	r31, r3
 8c4:	f0 62       	ori	r31, 0x20	; 32
 8c6:	3f 2e       	mov	r3, r31
 8c8:	08 c0       	rjmp	.+16     	; 0x8da <vfprintf+0x10c>
 8ca:	8c 36       	cpi	r24, 0x6C	; 108
 8cc:	21 f4       	brne	.+8      	; 0x8d6 <vfprintf+0x108>
 8ce:	83 2d       	mov	r24, r3
 8d0:	80 68       	ori	r24, 0x80	; 128
 8d2:	38 2e       	mov	r3, r24
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <vfprintf+0x10c>
 8d6:	88 36       	cpi	r24, 0x68	; 104
 8d8:	41 f4       	brne	.+16     	; 0x8ea <vfprintf+0x11c>
 8da:	f7 01       	movw	r30, r14
 8dc:	93 fd       	sbrc	r25, 3
 8de:	85 91       	lpm	r24, Z+
 8e0:	93 ff       	sbrs	r25, 3
 8e2:	81 91       	ld	r24, Z+
 8e4:	7f 01       	movw	r14, r30
 8e6:	81 11       	cpse	r24, r1
 8e8:	b3 cf       	rjmp	.-154    	; 0x850 <vfprintf+0x82>
 8ea:	98 2f       	mov	r25, r24
 8ec:	9f 7d       	andi	r25, 0xDF	; 223
 8ee:	95 54       	subi	r25, 0x45	; 69
 8f0:	93 30       	cpi	r25, 0x03	; 3
 8f2:	28 f4       	brcc	.+10     	; 0x8fe <vfprintf+0x130>
 8f4:	0c 5f       	subi	r16, 0xFC	; 252
 8f6:	1f 4f       	sbci	r17, 0xFF	; 255
 8f8:	9f e3       	ldi	r25, 0x3F	; 63
 8fa:	99 83       	std	Y+1, r25	; 0x01
 8fc:	0d c0       	rjmp	.+26     	; 0x918 <vfprintf+0x14a>
 8fe:	83 36       	cpi	r24, 0x63	; 99
 900:	31 f0       	breq	.+12     	; 0x90e <vfprintf+0x140>
 902:	83 37       	cpi	r24, 0x73	; 115
 904:	71 f0       	breq	.+28     	; 0x922 <vfprintf+0x154>
 906:	83 35       	cpi	r24, 0x53	; 83
 908:	09 f0       	breq	.+2      	; 0x90c <vfprintf+0x13e>
 90a:	55 c0       	rjmp	.+170    	; 0x9b6 <vfprintf+0x1e8>
 90c:	20 c0       	rjmp	.+64     	; 0x94e <vfprintf+0x180>
 90e:	f8 01       	movw	r30, r16
 910:	80 81       	ld	r24, Z
 912:	89 83       	std	Y+1, r24	; 0x01
 914:	0e 5f       	subi	r16, 0xFE	; 254
 916:	1f 4f       	sbci	r17, 0xFF	; 255
 918:	88 24       	eor	r8, r8
 91a:	83 94       	inc	r8
 91c:	91 2c       	mov	r9, r1
 91e:	53 01       	movw	r10, r6
 920:	12 c0       	rjmp	.+36     	; 0x946 <vfprintf+0x178>
 922:	28 01       	movw	r4, r16
 924:	f2 e0       	ldi	r31, 0x02	; 2
 926:	4f 0e       	add	r4, r31
 928:	51 1c       	adc	r5, r1
 92a:	f8 01       	movw	r30, r16
 92c:	a0 80       	ld	r10, Z
 92e:	b1 80       	ldd	r11, Z+1	; 0x01
 930:	36 fe       	sbrs	r3, 6
 932:	03 c0       	rjmp	.+6      	; 0x93a <vfprintf+0x16c>
 934:	69 2d       	mov	r22, r9
 936:	70 e0       	ldi	r23, 0x00	; 0
 938:	02 c0       	rjmp	.+4      	; 0x93e <vfprintf+0x170>
 93a:	6f ef       	ldi	r22, 0xFF	; 255
 93c:	7f ef       	ldi	r23, 0xFF	; 255
 93e:	c5 01       	movw	r24, r10
 940:	4e d1       	rcall	.+668    	; 0xbde <strnlen>
 942:	4c 01       	movw	r8, r24
 944:	82 01       	movw	r16, r4
 946:	f3 2d       	mov	r31, r3
 948:	ff 77       	andi	r31, 0x7F	; 127
 94a:	3f 2e       	mov	r3, r31
 94c:	15 c0       	rjmp	.+42     	; 0x978 <vfprintf+0x1aa>
 94e:	28 01       	movw	r4, r16
 950:	22 e0       	ldi	r18, 0x02	; 2
 952:	42 0e       	add	r4, r18
 954:	51 1c       	adc	r5, r1
 956:	f8 01       	movw	r30, r16
 958:	a0 80       	ld	r10, Z
 95a:	b1 80       	ldd	r11, Z+1	; 0x01
 95c:	36 fe       	sbrs	r3, 6
 95e:	03 c0       	rjmp	.+6      	; 0x966 <vfprintf+0x198>
 960:	69 2d       	mov	r22, r9
 962:	70 e0       	ldi	r23, 0x00	; 0
 964:	02 c0       	rjmp	.+4      	; 0x96a <vfprintf+0x19c>
 966:	6f ef       	ldi	r22, 0xFF	; 255
 968:	7f ef       	ldi	r23, 0xFF	; 255
 96a:	c5 01       	movw	r24, r10
 96c:	2d d1       	rcall	.+602    	; 0xbc8 <strnlen_P>
 96e:	4c 01       	movw	r8, r24
 970:	f3 2d       	mov	r31, r3
 972:	f0 68       	ori	r31, 0x80	; 128
 974:	3f 2e       	mov	r3, r31
 976:	82 01       	movw	r16, r4
 978:	33 fc       	sbrc	r3, 3
 97a:	19 c0       	rjmp	.+50     	; 0x9ae <vfprintf+0x1e0>
 97c:	82 2d       	mov	r24, r2
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	88 16       	cp	r8, r24
 982:	99 06       	cpc	r9, r25
 984:	a0 f4       	brcc	.+40     	; 0x9ae <vfprintf+0x1e0>
 986:	b6 01       	movw	r22, r12
 988:	80 e2       	ldi	r24, 0x20	; 32
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	33 d1       	rcall	.+614    	; 0xbf4 <fputc>
 98e:	2a 94       	dec	r2
 990:	f5 cf       	rjmp	.-22     	; 0x97c <vfprintf+0x1ae>
 992:	f5 01       	movw	r30, r10
 994:	37 fc       	sbrc	r3, 7
 996:	85 91       	lpm	r24, Z+
 998:	37 fe       	sbrs	r3, 7
 99a:	81 91       	ld	r24, Z+
 99c:	5f 01       	movw	r10, r30
 99e:	b6 01       	movw	r22, r12
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	28 d1       	rcall	.+592    	; 0xbf4 <fputc>
 9a4:	21 10       	cpse	r2, r1
 9a6:	2a 94       	dec	r2
 9a8:	21 e0       	ldi	r18, 0x01	; 1
 9aa:	82 1a       	sub	r8, r18
 9ac:	91 08       	sbc	r9, r1
 9ae:	81 14       	cp	r8, r1
 9b0:	91 04       	cpc	r9, r1
 9b2:	79 f7       	brne	.-34     	; 0x992 <vfprintf+0x1c4>
 9b4:	e1 c0       	rjmp	.+450    	; 0xb78 <vfprintf+0x3aa>
 9b6:	84 36       	cpi	r24, 0x64	; 100
 9b8:	11 f0       	breq	.+4      	; 0x9be <vfprintf+0x1f0>
 9ba:	89 36       	cpi	r24, 0x69	; 105
 9bc:	39 f5       	brne	.+78     	; 0xa0c <vfprintf+0x23e>
 9be:	f8 01       	movw	r30, r16
 9c0:	37 fe       	sbrs	r3, 7
 9c2:	07 c0       	rjmp	.+14     	; 0x9d2 <vfprintf+0x204>
 9c4:	60 81       	ld	r22, Z
 9c6:	71 81       	ldd	r23, Z+1	; 0x01
 9c8:	82 81       	ldd	r24, Z+2	; 0x02
 9ca:	93 81       	ldd	r25, Z+3	; 0x03
 9cc:	0c 5f       	subi	r16, 0xFC	; 252
 9ce:	1f 4f       	sbci	r17, 0xFF	; 255
 9d0:	08 c0       	rjmp	.+16     	; 0x9e2 <vfprintf+0x214>
 9d2:	60 81       	ld	r22, Z
 9d4:	71 81       	ldd	r23, Z+1	; 0x01
 9d6:	07 2e       	mov	r0, r23
 9d8:	00 0c       	add	r0, r0
 9da:	88 0b       	sbc	r24, r24
 9dc:	99 0b       	sbc	r25, r25
 9de:	0e 5f       	subi	r16, 0xFE	; 254
 9e0:	1f 4f       	sbci	r17, 0xFF	; 255
 9e2:	f3 2d       	mov	r31, r3
 9e4:	ff 76       	andi	r31, 0x6F	; 111
 9e6:	3f 2e       	mov	r3, r31
 9e8:	97 ff       	sbrs	r25, 7
 9ea:	09 c0       	rjmp	.+18     	; 0x9fe <vfprintf+0x230>
 9ec:	90 95       	com	r25
 9ee:	80 95       	com	r24
 9f0:	70 95       	com	r23
 9f2:	61 95       	neg	r22
 9f4:	7f 4f       	sbci	r23, 0xFF	; 255
 9f6:	8f 4f       	sbci	r24, 0xFF	; 255
 9f8:	9f 4f       	sbci	r25, 0xFF	; 255
 9fa:	f0 68       	ori	r31, 0x80	; 128
 9fc:	3f 2e       	mov	r3, r31
 9fe:	2a e0       	ldi	r18, 0x0A	; 10
 a00:	30 e0       	ldi	r19, 0x00	; 0
 a02:	a3 01       	movw	r20, r6
 a04:	33 d1       	rcall	.+614    	; 0xc6c <__ultoa_invert>
 a06:	88 2e       	mov	r8, r24
 a08:	86 18       	sub	r8, r6
 a0a:	44 c0       	rjmp	.+136    	; 0xa94 <vfprintf+0x2c6>
 a0c:	85 37       	cpi	r24, 0x75	; 117
 a0e:	31 f4       	brne	.+12     	; 0xa1c <vfprintf+0x24e>
 a10:	23 2d       	mov	r18, r3
 a12:	2f 7e       	andi	r18, 0xEF	; 239
 a14:	b2 2e       	mov	r11, r18
 a16:	2a e0       	ldi	r18, 0x0A	; 10
 a18:	30 e0       	ldi	r19, 0x00	; 0
 a1a:	25 c0       	rjmp	.+74     	; 0xa66 <vfprintf+0x298>
 a1c:	93 2d       	mov	r25, r3
 a1e:	99 7f       	andi	r25, 0xF9	; 249
 a20:	b9 2e       	mov	r11, r25
 a22:	8f 36       	cpi	r24, 0x6F	; 111
 a24:	c1 f0       	breq	.+48     	; 0xa56 <vfprintf+0x288>
 a26:	18 f4       	brcc	.+6      	; 0xa2e <vfprintf+0x260>
 a28:	88 35       	cpi	r24, 0x58	; 88
 a2a:	79 f0       	breq	.+30     	; 0xa4a <vfprintf+0x27c>
 a2c:	ae c0       	rjmp	.+348    	; 0xb8a <vfprintf+0x3bc>
 a2e:	80 37       	cpi	r24, 0x70	; 112
 a30:	19 f0       	breq	.+6      	; 0xa38 <vfprintf+0x26a>
 a32:	88 37       	cpi	r24, 0x78	; 120
 a34:	21 f0       	breq	.+8      	; 0xa3e <vfprintf+0x270>
 a36:	a9 c0       	rjmp	.+338    	; 0xb8a <vfprintf+0x3bc>
 a38:	e9 2f       	mov	r30, r25
 a3a:	e0 61       	ori	r30, 0x10	; 16
 a3c:	be 2e       	mov	r11, r30
 a3e:	b4 fe       	sbrs	r11, 4
 a40:	0d c0       	rjmp	.+26     	; 0xa5c <vfprintf+0x28e>
 a42:	fb 2d       	mov	r31, r11
 a44:	f4 60       	ori	r31, 0x04	; 4
 a46:	bf 2e       	mov	r11, r31
 a48:	09 c0       	rjmp	.+18     	; 0xa5c <vfprintf+0x28e>
 a4a:	34 fe       	sbrs	r3, 4
 a4c:	0a c0       	rjmp	.+20     	; 0xa62 <vfprintf+0x294>
 a4e:	29 2f       	mov	r18, r25
 a50:	26 60       	ori	r18, 0x06	; 6
 a52:	b2 2e       	mov	r11, r18
 a54:	06 c0       	rjmp	.+12     	; 0xa62 <vfprintf+0x294>
 a56:	28 e0       	ldi	r18, 0x08	; 8
 a58:	30 e0       	ldi	r19, 0x00	; 0
 a5a:	05 c0       	rjmp	.+10     	; 0xa66 <vfprintf+0x298>
 a5c:	20 e1       	ldi	r18, 0x10	; 16
 a5e:	30 e0       	ldi	r19, 0x00	; 0
 a60:	02 c0       	rjmp	.+4      	; 0xa66 <vfprintf+0x298>
 a62:	20 e1       	ldi	r18, 0x10	; 16
 a64:	32 e0       	ldi	r19, 0x02	; 2
 a66:	f8 01       	movw	r30, r16
 a68:	b7 fe       	sbrs	r11, 7
 a6a:	07 c0       	rjmp	.+14     	; 0xa7a <vfprintf+0x2ac>
 a6c:	60 81       	ld	r22, Z
 a6e:	71 81       	ldd	r23, Z+1	; 0x01
 a70:	82 81       	ldd	r24, Z+2	; 0x02
 a72:	93 81       	ldd	r25, Z+3	; 0x03
 a74:	0c 5f       	subi	r16, 0xFC	; 252
 a76:	1f 4f       	sbci	r17, 0xFF	; 255
 a78:	06 c0       	rjmp	.+12     	; 0xa86 <vfprintf+0x2b8>
 a7a:	60 81       	ld	r22, Z
 a7c:	71 81       	ldd	r23, Z+1	; 0x01
 a7e:	80 e0       	ldi	r24, 0x00	; 0
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	0e 5f       	subi	r16, 0xFE	; 254
 a84:	1f 4f       	sbci	r17, 0xFF	; 255
 a86:	a3 01       	movw	r20, r6
 a88:	f1 d0       	rcall	.+482    	; 0xc6c <__ultoa_invert>
 a8a:	88 2e       	mov	r8, r24
 a8c:	86 18       	sub	r8, r6
 a8e:	fb 2d       	mov	r31, r11
 a90:	ff 77       	andi	r31, 0x7F	; 127
 a92:	3f 2e       	mov	r3, r31
 a94:	36 fe       	sbrs	r3, 6
 a96:	0d c0       	rjmp	.+26     	; 0xab2 <vfprintf+0x2e4>
 a98:	23 2d       	mov	r18, r3
 a9a:	2e 7f       	andi	r18, 0xFE	; 254
 a9c:	a2 2e       	mov	r10, r18
 a9e:	89 14       	cp	r8, r9
 aa0:	58 f4       	brcc	.+22     	; 0xab8 <vfprintf+0x2ea>
 aa2:	34 fe       	sbrs	r3, 4
 aa4:	0b c0       	rjmp	.+22     	; 0xabc <vfprintf+0x2ee>
 aa6:	32 fc       	sbrc	r3, 2
 aa8:	09 c0       	rjmp	.+18     	; 0xabc <vfprintf+0x2ee>
 aaa:	83 2d       	mov	r24, r3
 aac:	8e 7e       	andi	r24, 0xEE	; 238
 aae:	a8 2e       	mov	r10, r24
 ab0:	05 c0       	rjmp	.+10     	; 0xabc <vfprintf+0x2ee>
 ab2:	b8 2c       	mov	r11, r8
 ab4:	a3 2c       	mov	r10, r3
 ab6:	03 c0       	rjmp	.+6      	; 0xabe <vfprintf+0x2f0>
 ab8:	b8 2c       	mov	r11, r8
 aba:	01 c0       	rjmp	.+2      	; 0xabe <vfprintf+0x2f0>
 abc:	b9 2c       	mov	r11, r9
 abe:	a4 fe       	sbrs	r10, 4
 ac0:	0f c0       	rjmp	.+30     	; 0xae0 <vfprintf+0x312>
 ac2:	fe 01       	movw	r30, r28
 ac4:	e8 0d       	add	r30, r8
 ac6:	f1 1d       	adc	r31, r1
 ac8:	80 81       	ld	r24, Z
 aca:	80 33       	cpi	r24, 0x30	; 48
 acc:	21 f4       	brne	.+8      	; 0xad6 <vfprintf+0x308>
 ace:	9a 2d       	mov	r25, r10
 ad0:	99 7e       	andi	r25, 0xE9	; 233
 ad2:	a9 2e       	mov	r10, r25
 ad4:	09 c0       	rjmp	.+18     	; 0xae8 <vfprintf+0x31a>
 ad6:	a2 fe       	sbrs	r10, 2
 ad8:	06 c0       	rjmp	.+12     	; 0xae6 <vfprintf+0x318>
 ada:	b3 94       	inc	r11
 adc:	b3 94       	inc	r11
 ade:	04 c0       	rjmp	.+8      	; 0xae8 <vfprintf+0x31a>
 ae0:	8a 2d       	mov	r24, r10
 ae2:	86 78       	andi	r24, 0x86	; 134
 ae4:	09 f0       	breq	.+2      	; 0xae8 <vfprintf+0x31a>
 ae6:	b3 94       	inc	r11
 ae8:	a3 fc       	sbrc	r10, 3
 aea:	10 c0       	rjmp	.+32     	; 0xb0c <vfprintf+0x33e>
 aec:	a0 fe       	sbrs	r10, 0
 aee:	06 c0       	rjmp	.+12     	; 0xafc <vfprintf+0x32e>
 af0:	b2 14       	cp	r11, r2
 af2:	80 f4       	brcc	.+32     	; 0xb14 <vfprintf+0x346>
 af4:	28 0c       	add	r2, r8
 af6:	92 2c       	mov	r9, r2
 af8:	9b 18       	sub	r9, r11
 afa:	0d c0       	rjmp	.+26     	; 0xb16 <vfprintf+0x348>
 afc:	b2 14       	cp	r11, r2
 afe:	58 f4       	brcc	.+22     	; 0xb16 <vfprintf+0x348>
 b00:	b6 01       	movw	r22, r12
 b02:	80 e2       	ldi	r24, 0x20	; 32
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	76 d0       	rcall	.+236    	; 0xbf4 <fputc>
 b08:	b3 94       	inc	r11
 b0a:	f8 cf       	rjmp	.-16     	; 0xafc <vfprintf+0x32e>
 b0c:	b2 14       	cp	r11, r2
 b0e:	18 f4       	brcc	.+6      	; 0xb16 <vfprintf+0x348>
 b10:	2b 18       	sub	r2, r11
 b12:	02 c0       	rjmp	.+4      	; 0xb18 <vfprintf+0x34a>
 b14:	98 2c       	mov	r9, r8
 b16:	21 2c       	mov	r2, r1
 b18:	a4 fe       	sbrs	r10, 4
 b1a:	0f c0       	rjmp	.+30     	; 0xb3a <vfprintf+0x36c>
 b1c:	b6 01       	movw	r22, r12
 b1e:	80 e3       	ldi	r24, 0x30	; 48
 b20:	90 e0       	ldi	r25, 0x00	; 0
 b22:	68 d0       	rcall	.+208    	; 0xbf4 <fputc>
 b24:	a2 fe       	sbrs	r10, 2
 b26:	16 c0       	rjmp	.+44     	; 0xb54 <vfprintf+0x386>
 b28:	a1 fc       	sbrc	r10, 1
 b2a:	03 c0       	rjmp	.+6      	; 0xb32 <vfprintf+0x364>
 b2c:	88 e7       	ldi	r24, 0x78	; 120
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	02 c0       	rjmp	.+4      	; 0xb36 <vfprintf+0x368>
 b32:	88 e5       	ldi	r24, 0x58	; 88
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	b6 01       	movw	r22, r12
 b38:	0c c0       	rjmp	.+24     	; 0xb52 <vfprintf+0x384>
 b3a:	8a 2d       	mov	r24, r10
 b3c:	86 78       	andi	r24, 0x86	; 134
 b3e:	51 f0       	breq	.+20     	; 0xb54 <vfprintf+0x386>
 b40:	a1 fe       	sbrs	r10, 1
 b42:	02 c0       	rjmp	.+4      	; 0xb48 <vfprintf+0x37a>
 b44:	8b e2       	ldi	r24, 0x2B	; 43
 b46:	01 c0       	rjmp	.+2      	; 0xb4a <vfprintf+0x37c>
 b48:	80 e2       	ldi	r24, 0x20	; 32
 b4a:	a7 fc       	sbrc	r10, 7
 b4c:	8d e2       	ldi	r24, 0x2D	; 45
 b4e:	b6 01       	movw	r22, r12
 b50:	90 e0       	ldi	r25, 0x00	; 0
 b52:	50 d0       	rcall	.+160    	; 0xbf4 <fputc>
 b54:	89 14       	cp	r8, r9
 b56:	30 f4       	brcc	.+12     	; 0xb64 <vfprintf+0x396>
 b58:	b6 01       	movw	r22, r12
 b5a:	80 e3       	ldi	r24, 0x30	; 48
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	4a d0       	rcall	.+148    	; 0xbf4 <fputc>
 b60:	9a 94       	dec	r9
 b62:	f8 cf       	rjmp	.-16     	; 0xb54 <vfprintf+0x386>
 b64:	8a 94       	dec	r8
 b66:	f3 01       	movw	r30, r6
 b68:	e8 0d       	add	r30, r8
 b6a:	f1 1d       	adc	r31, r1
 b6c:	80 81       	ld	r24, Z
 b6e:	b6 01       	movw	r22, r12
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	40 d0       	rcall	.+128    	; 0xbf4 <fputc>
 b74:	81 10       	cpse	r8, r1
 b76:	f6 cf       	rjmp	.-20     	; 0xb64 <vfprintf+0x396>
 b78:	22 20       	and	r2, r2
 b7a:	09 f4       	brne	.+2      	; 0xb7e <vfprintf+0x3b0>
 b7c:	4e ce       	rjmp	.-868    	; 0x81a <vfprintf+0x4c>
 b7e:	b6 01       	movw	r22, r12
 b80:	80 e2       	ldi	r24, 0x20	; 32
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	37 d0       	rcall	.+110    	; 0xbf4 <fputc>
 b86:	2a 94       	dec	r2
 b88:	f7 cf       	rjmp	.-18     	; 0xb78 <vfprintf+0x3aa>
 b8a:	f6 01       	movw	r30, r12
 b8c:	86 81       	ldd	r24, Z+6	; 0x06
 b8e:	97 81       	ldd	r25, Z+7	; 0x07
 b90:	02 c0       	rjmp	.+4      	; 0xb96 <vfprintf+0x3c8>
 b92:	8f ef       	ldi	r24, 0xFF	; 255
 b94:	9f ef       	ldi	r25, 0xFF	; 255
 b96:	2b 96       	adiw	r28, 0x0b	; 11
 b98:	0f b6       	in	r0, 0x3f	; 63
 b9a:	f8 94       	cli
 b9c:	de bf       	out	0x3e, r29	; 62
 b9e:	0f be       	out	0x3f, r0	; 63
 ba0:	cd bf       	out	0x3d, r28	; 61
 ba2:	df 91       	pop	r29
 ba4:	cf 91       	pop	r28
 ba6:	1f 91       	pop	r17
 ba8:	0f 91       	pop	r16
 baa:	ff 90       	pop	r15
 bac:	ef 90       	pop	r14
 bae:	df 90       	pop	r13
 bb0:	cf 90       	pop	r12
 bb2:	bf 90       	pop	r11
 bb4:	af 90       	pop	r10
 bb6:	9f 90       	pop	r9
 bb8:	8f 90       	pop	r8
 bba:	7f 90       	pop	r7
 bbc:	6f 90       	pop	r6
 bbe:	5f 90       	pop	r5
 bc0:	4f 90       	pop	r4
 bc2:	3f 90       	pop	r3
 bc4:	2f 90       	pop	r2
 bc6:	08 95       	ret

00000bc8 <strnlen_P>:
 bc8:	fc 01       	movw	r30, r24
 bca:	05 90       	lpm	r0, Z+
 bcc:	61 50       	subi	r22, 0x01	; 1
 bce:	70 40       	sbci	r23, 0x00	; 0
 bd0:	01 10       	cpse	r0, r1
 bd2:	d8 f7       	brcc	.-10     	; 0xbca <strnlen_P+0x2>
 bd4:	80 95       	com	r24
 bd6:	90 95       	com	r25
 bd8:	8e 0f       	add	r24, r30
 bda:	9f 1f       	adc	r25, r31
 bdc:	08 95       	ret

00000bde <strnlen>:
 bde:	fc 01       	movw	r30, r24
 be0:	61 50       	subi	r22, 0x01	; 1
 be2:	70 40       	sbci	r23, 0x00	; 0
 be4:	01 90       	ld	r0, Z+
 be6:	01 10       	cpse	r0, r1
 be8:	d8 f7       	brcc	.-10     	; 0xbe0 <strnlen+0x2>
 bea:	80 95       	com	r24
 bec:	90 95       	com	r25
 bee:	8e 0f       	add	r24, r30
 bf0:	9f 1f       	adc	r25, r31
 bf2:	08 95       	ret

00000bf4 <fputc>:
 bf4:	0f 93       	push	r16
 bf6:	1f 93       	push	r17
 bf8:	cf 93       	push	r28
 bfa:	df 93       	push	r29
 bfc:	fb 01       	movw	r30, r22
 bfe:	23 81       	ldd	r18, Z+3	; 0x03
 c00:	21 fd       	sbrc	r18, 1
 c02:	03 c0       	rjmp	.+6      	; 0xc0a <fputc+0x16>
 c04:	8f ef       	ldi	r24, 0xFF	; 255
 c06:	9f ef       	ldi	r25, 0xFF	; 255
 c08:	2c c0       	rjmp	.+88     	; 0xc62 <fputc+0x6e>
 c0a:	22 ff       	sbrs	r18, 2
 c0c:	16 c0       	rjmp	.+44     	; 0xc3a <fputc+0x46>
 c0e:	46 81       	ldd	r20, Z+6	; 0x06
 c10:	57 81       	ldd	r21, Z+7	; 0x07
 c12:	24 81       	ldd	r18, Z+4	; 0x04
 c14:	35 81       	ldd	r19, Z+5	; 0x05
 c16:	42 17       	cp	r20, r18
 c18:	53 07       	cpc	r21, r19
 c1a:	44 f4       	brge	.+16     	; 0xc2c <fputc+0x38>
 c1c:	a0 81       	ld	r26, Z
 c1e:	b1 81       	ldd	r27, Z+1	; 0x01
 c20:	9d 01       	movw	r18, r26
 c22:	2f 5f       	subi	r18, 0xFF	; 255
 c24:	3f 4f       	sbci	r19, 0xFF	; 255
 c26:	31 83       	std	Z+1, r19	; 0x01
 c28:	20 83       	st	Z, r18
 c2a:	8c 93       	st	X, r24
 c2c:	26 81       	ldd	r18, Z+6	; 0x06
 c2e:	37 81       	ldd	r19, Z+7	; 0x07
 c30:	2f 5f       	subi	r18, 0xFF	; 255
 c32:	3f 4f       	sbci	r19, 0xFF	; 255
 c34:	37 83       	std	Z+7, r19	; 0x07
 c36:	26 83       	std	Z+6, r18	; 0x06
 c38:	14 c0       	rjmp	.+40     	; 0xc62 <fputc+0x6e>
 c3a:	8b 01       	movw	r16, r22
 c3c:	ec 01       	movw	r28, r24
 c3e:	fb 01       	movw	r30, r22
 c40:	00 84       	ldd	r0, Z+8	; 0x08
 c42:	f1 85       	ldd	r31, Z+9	; 0x09
 c44:	e0 2d       	mov	r30, r0
 c46:	19 95       	eicall
 c48:	89 2b       	or	r24, r25
 c4a:	e1 f6       	brne	.-72     	; 0xc04 <fputc+0x10>
 c4c:	d8 01       	movw	r26, r16
 c4e:	16 96       	adiw	r26, 0x06	; 6
 c50:	8d 91       	ld	r24, X+
 c52:	9c 91       	ld	r25, X
 c54:	17 97       	sbiw	r26, 0x07	; 7
 c56:	01 96       	adiw	r24, 0x01	; 1
 c58:	17 96       	adiw	r26, 0x07	; 7
 c5a:	9c 93       	st	X, r25
 c5c:	8e 93       	st	-X, r24
 c5e:	16 97       	sbiw	r26, 0x06	; 6
 c60:	ce 01       	movw	r24, r28
 c62:	df 91       	pop	r29
 c64:	cf 91       	pop	r28
 c66:	1f 91       	pop	r17
 c68:	0f 91       	pop	r16
 c6a:	08 95       	ret

00000c6c <__ultoa_invert>:
 c6c:	fa 01       	movw	r30, r20
 c6e:	aa 27       	eor	r26, r26
 c70:	28 30       	cpi	r18, 0x08	; 8
 c72:	51 f1       	breq	.+84     	; 0xcc8 <__ultoa_invert+0x5c>
 c74:	20 31       	cpi	r18, 0x10	; 16
 c76:	81 f1       	breq	.+96     	; 0xcd8 <__ultoa_invert+0x6c>
 c78:	e8 94       	clt
 c7a:	6f 93       	push	r22
 c7c:	6e 7f       	andi	r22, 0xFE	; 254
 c7e:	6e 5f       	subi	r22, 0xFE	; 254
 c80:	7f 4f       	sbci	r23, 0xFF	; 255
 c82:	8f 4f       	sbci	r24, 0xFF	; 255
 c84:	9f 4f       	sbci	r25, 0xFF	; 255
 c86:	af 4f       	sbci	r26, 0xFF	; 255
 c88:	b1 e0       	ldi	r27, 0x01	; 1
 c8a:	3e d0       	rcall	.+124    	; 0xd08 <__ultoa_invert+0x9c>
 c8c:	b4 e0       	ldi	r27, 0x04	; 4
 c8e:	3c d0       	rcall	.+120    	; 0xd08 <__ultoa_invert+0x9c>
 c90:	67 0f       	add	r22, r23
 c92:	78 1f       	adc	r23, r24
 c94:	89 1f       	adc	r24, r25
 c96:	9a 1f       	adc	r25, r26
 c98:	a1 1d       	adc	r26, r1
 c9a:	68 0f       	add	r22, r24
 c9c:	79 1f       	adc	r23, r25
 c9e:	8a 1f       	adc	r24, r26
 ca0:	91 1d       	adc	r25, r1
 ca2:	a1 1d       	adc	r26, r1
 ca4:	6a 0f       	add	r22, r26
 ca6:	71 1d       	adc	r23, r1
 ca8:	81 1d       	adc	r24, r1
 caa:	91 1d       	adc	r25, r1
 cac:	a1 1d       	adc	r26, r1
 cae:	20 d0       	rcall	.+64     	; 0xcf0 <__ultoa_invert+0x84>
 cb0:	09 f4       	brne	.+2      	; 0xcb4 <__ultoa_invert+0x48>
 cb2:	68 94       	set
 cb4:	3f 91       	pop	r19
 cb6:	2a e0       	ldi	r18, 0x0A	; 10
 cb8:	26 9f       	mul	r18, r22
 cba:	11 24       	eor	r1, r1
 cbc:	30 19       	sub	r19, r0
 cbe:	30 5d       	subi	r19, 0xD0	; 208
 cc0:	31 93       	st	Z+, r19
 cc2:	de f6       	brtc	.-74     	; 0xc7a <__ultoa_invert+0xe>
 cc4:	cf 01       	movw	r24, r30
 cc6:	08 95       	ret
 cc8:	46 2f       	mov	r20, r22
 cca:	47 70       	andi	r20, 0x07	; 7
 ccc:	40 5d       	subi	r20, 0xD0	; 208
 cce:	41 93       	st	Z+, r20
 cd0:	b3 e0       	ldi	r27, 0x03	; 3
 cd2:	0f d0       	rcall	.+30     	; 0xcf2 <__ultoa_invert+0x86>
 cd4:	c9 f7       	brne	.-14     	; 0xcc8 <__ultoa_invert+0x5c>
 cd6:	f6 cf       	rjmp	.-20     	; 0xcc4 <__ultoa_invert+0x58>
 cd8:	46 2f       	mov	r20, r22
 cda:	4f 70       	andi	r20, 0x0F	; 15
 cdc:	40 5d       	subi	r20, 0xD0	; 208
 cde:	4a 33       	cpi	r20, 0x3A	; 58
 ce0:	18 f0       	brcs	.+6      	; 0xce8 <__ultoa_invert+0x7c>
 ce2:	49 5d       	subi	r20, 0xD9	; 217
 ce4:	31 fd       	sbrc	r19, 1
 ce6:	40 52       	subi	r20, 0x20	; 32
 ce8:	41 93       	st	Z+, r20
 cea:	02 d0       	rcall	.+4      	; 0xcf0 <__ultoa_invert+0x84>
 cec:	a9 f7       	brne	.-22     	; 0xcd8 <__ultoa_invert+0x6c>
 cee:	ea cf       	rjmp	.-44     	; 0xcc4 <__ultoa_invert+0x58>
 cf0:	b4 e0       	ldi	r27, 0x04	; 4
 cf2:	a6 95       	lsr	r26
 cf4:	97 95       	ror	r25
 cf6:	87 95       	ror	r24
 cf8:	77 95       	ror	r23
 cfa:	67 95       	ror	r22
 cfc:	ba 95       	dec	r27
 cfe:	c9 f7       	brne	.-14     	; 0xcf2 <__ultoa_invert+0x86>
 d00:	00 97       	sbiw	r24, 0x00	; 0
 d02:	61 05       	cpc	r22, r1
 d04:	71 05       	cpc	r23, r1
 d06:	08 95       	ret
 d08:	9b 01       	movw	r18, r22
 d0a:	ac 01       	movw	r20, r24
 d0c:	0a 2e       	mov	r0, r26
 d0e:	06 94       	lsr	r0
 d10:	57 95       	ror	r21
 d12:	47 95       	ror	r20
 d14:	37 95       	ror	r19
 d16:	27 95       	ror	r18
 d18:	ba 95       	dec	r27
 d1a:	c9 f7       	brne	.-14     	; 0xd0e <__ultoa_invert+0xa2>
 d1c:	62 0f       	add	r22, r18
 d1e:	73 1f       	adc	r23, r19
 d20:	84 1f       	adc	r24, r20
 d22:	95 1f       	adc	r25, r21
 d24:	a0 1d       	adc	r26, r0
 d26:	08 95       	ret

00000d28 <eeprom_read_word>:
 d28:	a8 e1       	ldi	r26, 0x18	; 24
 d2a:	b0 e0       	ldi	r27, 0x00	; 0
 d2c:	42 e0       	ldi	r20, 0x02	; 2
 d2e:	50 e0       	ldi	r21, 0x00	; 0
 d30:	05 c0       	rjmp	.+10     	; 0xd3c <eeprom_read_blraw>

00000d32 <eeprom_write_word>:
 d32:	12 d0       	rcall	.+36     	; 0xd58 <eeprom_write_byte>
 d34:	27 2f       	mov	r18, r23
 d36:	11 c0       	rjmp	.+34     	; 0xd5a <eeprom_write_r18>

00000d38 <eeprom_read_block>:
 d38:	dc 01       	movw	r26, r24
 d3a:	cb 01       	movw	r24, r22

00000d3c <eeprom_read_blraw>:
 d3c:	fc 01       	movw	r30, r24
 d3e:	f9 99       	sbic	0x1f, 1	; 31
 d40:	fe cf       	rjmp	.-4      	; 0xd3e <eeprom_read_blraw+0x2>
 d42:	06 c0       	rjmp	.+12     	; 0xd50 <eeprom_read_blraw+0x14>
 d44:	f2 bd       	out	0x22, r31	; 34
 d46:	e1 bd       	out	0x21, r30	; 33
 d48:	f8 9a       	sbi	0x1f, 0	; 31
 d4a:	31 96       	adiw	r30, 0x01	; 1
 d4c:	00 b4       	in	r0, 0x20	; 32
 d4e:	0d 92       	st	X+, r0
 d50:	41 50       	subi	r20, 0x01	; 1
 d52:	50 40       	sbci	r21, 0x00	; 0
 d54:	b8 f7       	brcc	.-18     	; 0xd44 <eeprom_read_blraw+0x8>
 d56:	08 95       	ret

00000d58 <eeprom_write_byte>:
 d58:	26 2f       	mov	r18, r22

00000d5a <eeprom_write_r18>:
 d5a:	f9 99       	sbic	0x1f, 1	; 31
 d5c:	fe cf       	rjmp	.-4      	; 0xd5a <eeprom_write_r18>
 d5e:	1f ba       	out	0x1f, r1	; 31
 d60:	92 bd       	out	0x22, r25	; 34
 d62:	81 bd       	out	0x21, r24	; 33
 d64:	20 bd       	out	0x20, r18	; 32
 d66:	0f b6       	in	r0, 0x3f	; 63
 d68:	f8 94       	cli
 d6a:	fa 9a       	sbi	0x1f, 2	; 31
 d6c:	f9 9a       	sbi	0x1f, 1	; 31
 d6e:	0f be       	out	0x3f, r0	; 63
 d70:	01 96       	adiw	r24, 0x01	; 1
 d72:	08 95       	ret

00000d74 <__divmodsi4>:
 d74:	05 2e       	mov	r0, r21
 d76:	97 fb       	bst	r25, 7
 d78:	16 f4       	brtc	.+4      	; 0xd7e <__divmodsi4+0xa>
 d7a:	00 94       	com	r0
 d7c:	0f d0       	rcall	.+30     	; 0xd9c <__negsi2>
 d7e:	57 fd       	sbrc	r21, 7
 d80:	05 d0       	rcall	.+10     	; 0xd8c <__divmodsi4_neg2>
 d82:	24 d0       	rcall	.+72     	; 0xdcc <__udivmodsi4>
 d84:	07 fc       	sbrc	r0, 7
 d86:	02 d0       	rcall	.+4      	; 0xd8c <__divmodsi4_neg2>
 d88:	46 f4       	brtc	.+16     	; 0xd9a <__divmodsi4_exit>
 d8a:	08 c0       	rjmp	.+16     	; 0xd9c <__negsi2>

00000d8c <__divmodsi4_neg2>:
 d8c:	50 95       	com	r21
 d8e:	40 95       	com	r20
 d90:	30 95       	com	r19
 d92:	21 95       	neg	r18
 d94:	3f 4f       	sbci	r19, 0xFF	; 255
 d96:	4f 4f       	sbci	r20, 0xFF	; 255
 d98:	5f 4f       	sbci	r21, 0xFF	; 255

00000d9a <__divmodsi4_exit>:
 d9a:	08 95       	ret

00000d9c <__negsi2>:
 d9c:	90 95       	com	r25
 d9e:	80 95       	com	r24
 da0:	70 95       	com	r23
 da2:	61 95       	neg	r22
 da4:	7f 4f       	sbci	r23, 0xFF	; 255
 da6:	8f 4f       	sbci	r24, 0xFF	; 255
 da8:	9f 4f       	sbci	r25, 0xFF	; 255
 daa:	08 95       	ret

00000dac <__muluhisi3>:
 dac:	31 d0       	rcall	.+98     	; 0xe10 <__umulhisi3>
 dae:	a5 9f       	mul	r26, r21
 db0:	90 0d       	add	r25, r0
 db2:	b4 9f       	mul	r27, r20
 db4:	90 0d       	add	r25, r0
 db6:	a4 9f       	mul	r26, r20
 db8:	80 0d       	add	r24, r0
 dba:	91 1d       	adc	r25, r1
 dbc:	11 24       	eor	r1, r1
 dbe:	08 95       	ret

00000dc0 <__mulshisi3>:
 dc0:	b7 ff       	sbrs	r27, 7
 dc2:	f4 cf       	rjmp	.-24     	; 0xdac <__muluhisi3>

00000dc4 <__mulohisi3>:
 dc4:	f3 df       	rcall	.-26     	; 0xdac <__muluhisi3>
 dc6:	82 1b       	sub	r24, r18
 dc8:	93 0b       	sbc	r25, r19
 dca:	08 95       	ret

00000dcc <__udivmodsi4>:
 dcc:	a1 e2       	ldi	r26, 0x21	; 33
 dce:	1a 2e       	mov	r1, r26
 dd0:	aa 1b       	sub	r26, r26
 dd2:	bb 1b       	sub	r27, r27
 dd4:	fd 01       	movw	r30, r26
 dd6:	0d c0       	rjmp	.+26     	; 0xdf2 <__udivmodsi4_ep>

00000dd8 <__udivmodsi4_loop>:
 dd8:	aa 1f       	adc	r26, r26
 dda:	bb 1f       	adc	r27, r27
 ddc:	ee 1f       	adc	r30, r30
 dde:	ff 1f       	adc	r31, r31
 de0:	a2 17       	cp	r26, r18
 de2:	b3 07       	cpc	r27, r19
 de4:	e4 07       	cpc	r30, r20
 de6:	f5 07       	cpc	r31, r21
 de8:	20 f0       	brcs	.+8      	; 0xdf2 <__udivmodsi4_ep>
 dea:	a2 1b       	sub	r26, r18
 dec:	b3 0b       	sbc	r27, r19
 dee:	e4 0b       	sbc	r30, r20
 df0:	f5 0b       	sbc	r31, r21

00000df2 <__udivmodsi4_ep>:
 df2:	66 1f       	adc	r22, r22
 df4:	77 1f       	adc	r23, r23
 df6:	88 1f       	adc	r24, r24
 df8:	99 1f       	adc	r25, r25
 dfa:	1a 94       	dec	r1
 dfc:	69 f7       	brne	.-38     	; 0xdd8 <__udivmodsi4_loop>
 dfe:	60 95       	com	r22
 e00:	70 95       	com	r23
 e02:	80 95       	com	r24
 e04:	90 95       	com	r25
 e06:	9b 01       	movw	r18, r22
 e08:	ac 01       	movw	r20, r24
 e0a:	bd 01       	movw	r22, r26
 e0c:	cf 01       	movw	r24, r30
 e0e:	08 95       	ret

00000e10 <__umulhisi3>:
 e10:	a2 9f       	mul	r26, r18
 e12:	b0 01       	movw	r22, r0
 e14:	b3 9f       	mul	r27, r19
 e16:	c0 01       	movw	r24, r0
 e18:	a3 9f       	mul	r26, r19
 e1a:	70 0d       	add	r23, r0
 e1c:	81 1d       	adc	r24, r1
 e1e:	11 24       	eor	r1, r1
 e20:	91 1d       	adc	r25, r1
 e22:	b2 9f       	mul	r27, r18
 e24:	70 0d       	add	r23, r0
 e26:	81 1d       	adc	r24, r1
 e28:	11 24       	eor	r1, r1
 e2a:	91 1d       	adc	r25, r1
 e2c:	08 95       	ret

00000e2e <_exit>:
 e2e:	f8 94       	cli

00000e30 <__stop_program>:
 e30:	ff cf       	rjmp	.-2      	; 0xe30 <__stop_program>
